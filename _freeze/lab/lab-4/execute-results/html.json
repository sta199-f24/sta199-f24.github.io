{
  "hash": "0d1c63cc15bc4a8029f430d453d99b13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 4\nsubtitle: Everything so far I\ncategories: Lab\ndescription: \"Mon, Oct 7 at 8:30 am\"\n---\n\n\n\n# Introduction\n\nIn this lab, you'll review topics you've worked with in previous labs, practice importing data, and dive into the concepts of data types and classes.\n\n::: callout-note\nThis lab assumes you've completed the labs so far and doesn't repeat setup and overview content from those labs.\nIf you haven't done those yet, you should review the previous labs before starting on this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Learn to read data in from Excel spreadsheets\n-   Gain more experience with joining and pivoting data frames\n-   ...\n\nAnd, as usual, you will also...\n\n-   Get more experience with data science workflow using R, RStudio, Git, and GitHub\n-   Further your reproducible authoring skills with Quarto\n-   Improve your familiarity with version control using Git and GitHub\n\n## Getting started\n\nLog in to RStudio, clone your `lab-4` repo from GitHub, open your `lab-4.qmd` document, and get started!\n\n::: {.callout-tip collapse=\"true\"}\n## Click here if you prefer to see step-by-step instructions\n\n### Step 1: Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and log in with your Duke NetID and Password.\n-   Click `STA198-199` under My reservations to log into your container. You should now see the RStudio environment.\n\n### Step 2: Clone the repo & start a new RStudio project\n\n-   Go to the course organization at [github.com/sta199-f24](https://github.com/sta199-f24) organization on GitHub.\n    Click on the repo with the prefix **lab-4**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button and select **Use SSH**.\n    This might already be selected by default; if it is, you'll see the text **Clone with SSH**.\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-4.qmd* to open the template Quarto file.\n    This is where you will write up your code and narrative for the lab.\n\n### Step 3: Update the YAML\n\nIn `lab-4.qmd`, update the `author` field to your name, render your document and examine the changes.\nThen, in the Git pane, click on **Diff** to view your changes, add a commit message (e.g., \"Added author name\"), and click **Commit**.\nThen, push the changes to your GitHub repository, and in your browser confirm that these changes have indeed propagated to your repository.\n:::\n\n::: callout-important\nIf you run into any issues with the first steps outlined above, flag a TA for help before proceeding.\n:::\n\n## Packages\n\nIn this lab, we will work with the\n\n-   **tidyverse** package for doing data analysis in a \"tidy\" way,\n-   **janitor** package for cleaning up variable names, and\n-   **palmerpenguins** and **datasauRus** packages for some datasets\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(palmerpenguins)\nlibrary(datasauRus)\n```\n:::\n\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package so that its features (the functions and datasets in it) are accessible from your *Console*.\n-   Then, **render** the document that loads this package to make its features (the functions and datasets in it) available for other code cells in your Quarto document.\n\n## Guidelines\n\n\nAs we've discussed in lecture, your plots should include an informative title, axes and legends should have human-readable labels, and careful consideration should be given to aesthetic choices.\n\nAdditionally, code should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   code should be properly indented,\n\n-   there should be spaces around `=` signs and spaces after commas.\n\nFurthermore, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.\n\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\nThere will be periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub.\n\n::: callout-important\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\nThere will be periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub.\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n\n\n# Questions\n\n## Part 1 - Team USA at the Olympics\n\nFor this part, you'll work with data from the rosters of Team USA from the 2020 and 2024 Olympics.\nThe data come from <https://www.teamusa.com> and the rosters for the two games are in a single Excel file (`team-usa.xlsx` in your `data` folder), accross two separate spreadsheets within that file.\n@fig-olympics-sheets shows screenshots of these spreadsheets.\n\n::: {#fig-olympics-sheets layout-ncol=\"2\"}\n![Team USA 2020](images/lab-4/team-usa-2020.png)\n\n![Team USA 2024](images/lab-4/team-usa-2024.png)\n\nExcel file with two sheets for rosters of Team USA 2020 and 2024.\n:::\n\nYour goal is to answer questions about athletes who competed in both games and only one of the games.\n\n### Question 1\n\na.  Read data from the two sheets of `team-usa.xlsx` as two separate data frames called `team_usa_2020` and `team_usa_2024`.\n\n::: callout-tip\nThe names of the sheets are shown in the screenshots in @fig-olympics-sheets, or you can use the `excel_sheets()` function to discover them.\nAdditionally, note that the first row of the sheets contain a logo and a title describing the contents of the data, and not the header row containing variable names.\n:::\n\nb.  Read the documentation for the `clean_names()` function from the **janitor** package at <https://sfirke.github.io/janitor/reference/clean_names.html>.\n    Use this function to \"clean\" the variable names of `team_usa_2020` and `team_usa_2024` and save the data frames with the new variable names.\n\nc.  Create a new variable in both of the datasets called `name` that:\n\n    -   `paste()`s together the `first_name` and `last_name` variables with a space in between and\n    -   is the first variable in the resulting data frame.\n\nd.  Using the appropriate `*_join()` function, determine how many athletes participated in both Olympic Games?\n\n::: callout-important\nYour answer to this question, based on the data frames you created, should be 0, even if it doesn't make sense in context of actual Olympic athletes.\n:::\n\n### Question 2\n\nIf you have even a passing knowledge of the Olympic Games, you might know that there are some athletes that participated in both the 2020 and 2024 games, e.g., Simone Biles, Katie Ledecky, etc.\n\na. The reason why athlete names didn't match across the two data frames is that in one data frame, names are in UPPER CASE, and in the other, they're in Title Case. Update the 2020 data frame to make `name` all upper case. Display the first 10 rows of `team_usa_2020` with upper case names.\n\n::: callout-important\nYour answer must use the `str_to_upper()` function.\n:::\n\nb.  Let's try that question again: How many athletes participated in both Olympic Games?\n\nc.  How many athletes participated in the 2020 Olympic Games but not the 2024 Olympic Games?\n    How many athletes participated in the 2024 Olympic Games but not the 2020 Olympic Games?\n\n## Part 2 - DatasauRus\n\nThe data frame you will be working with in this part is called `datasaurus_dozen` and it's in the **datasauRus** package.\nThis single data frame contains 13 datasets, designed to show us why data visualization is important and how summary statistics alone can be misleading.\nThe different datasets are marked by the `dataset` variable, as shown in @fig-datasaurus.\n\n![The \\`datasaurus_dozen\\` data frame stacks 13 datasets on top of each other. This figure shows the first three datasets.](images/lab-4/datasaurus-dozen.png){#fig-datasaurus fig-align=\"center\" width=\"432\"}\n\n::: callout-note\nIf it's confusing that the data frame is called `datasaurus_dozen` when it contains 13 datasets, you're not alone!\nHave you heard of a [baker's dozen](https://www.mentalfloss.com/article/32259/why-bakers-dozen-13)?\n:::\n\nHere is a peek at the top 10 rows of the dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasaurus_dozen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,846 × 3\n   dataset     x     y\n   <chr>   <dbl> <dbl>\n 1 dino     55.4  97.2\n 2 dino     51.5  96.0\n 3 dino     46.2  94.5\n 4 dino     42.8  91.4\n 5 dino     40.8  88.3\n 6 dino     38.7  84.9\n 7 dino     35.6  79.9\n 8 dino     33.1  77.6\n 9 dino     29.0  74.5\n10 dino     26.2  71.4\n# ℹ 1,836 more rows\n```\n\n\n:::\n:::\n\n\n\n### Question 3\n\nIn a single pipeline, calculate the mean of `x`, mean of `y`, standard deviation of `x`, standard deviation of `y`, and the correlation between `x` and `y` for each level of the `dataset` variable.\nThen, in 1-2 sentences, comment on how these summary statistics compare across groups (datasets).\n\n::: callout-tip\nThere are 13 groups but `tibble`s only print out 10 rows by default.\nTo display all rows, add `print(n = 13)` as the last step of your pipeline.\n:::\n\n### Question 4\n\nCreate a scatterplot of `y` versus `x` and color and facet it by `dataset`.\nThen, in 1-2 sentences, how these plots compare across groups (datasets).\nHow does your response in this question compare to your response to the previous question and what does this say about using visualizations and summary statistics when getting to know a dataset?\n\n::: callout-tip\nWhen you both color and facet by the same variable, you'll end up with a redundant legend.\nTurn off the legend by adding `show.legend = FALSE` to the geom creating the legend.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes.\nMake sure that you commit and push all changed documents and that your Git pane is completely empty before proceeding.\n:::\n\n## Part 3 - Medical marijuana in NC\n\nSurveyUSA polled 900 NC adults between September 4-7, 2024.\nOf the 900 NC adults, 771 were identified by SurveyUSA as being registered to vote.[^1]\nThe following question was asked to these 771 adults:\n\n[^1]: Full survey results can be found at <https://www.surveyusa.com/client/PollReport.aspx?g=c6995e17-3837-413e-ac98-3684e1c74dc1>.\n\n> Should the use of marijuana for medical use remain against the law in North Carolina?\n> Or be legalized?\n\nResponses were broken down into the following categories:\n\n| Variable | Levels                                          |\n|:---------|:------------------------------------------------|\n| Age      | 18-49; 50+                                      |\n| Opinion  | Remain Against The Law; Be Made Legal; Not Sure |\n\nOf the 771 responses, 391 were between the ages of 18-49.\nOf the individuals that are between 18-49, 59 individuals responded that they think medical marijuana should remain against the law, 292 said it should be made legal, and the remainder were not sure.\nOf the individuals that are 50+, 67 individuals responded that they think medical marijuana should remain against the law, 245 said it should be made legal, and the remainder were not sure.\n\n### Question 5\n\na.  Fill in the code below to create a two-way table that summarizes these data.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    survey_counts <- tibble( \n      age = c(),\n      opinion = c(),\n      n = c()\n      )\n    \n    survey_counts |>\n      pivot_wider( \n        names_from = ___,\n        values_from = ___\n      )\n    ```\n    :::\n\n\n\nFor parts b-d below, use a your response single pipeline starting with `survey_counts`, calculate the desired proportions, and make sure the result is an **ungrouped** data frame with a column for relevant counts, a column for relevant proportions, and a column for the groups you're interested in.\n\nb.  Calculate the proportions of 18-49 year olds and 50+ year-olds in this sample.\n\nc.  Calculate the proportions of those who think medical marijuana should remain against the law, should be made legal, and who are not sure.\n\nd.  Calculate the proportions of individuals in this sample who think medical marijuana should remain against the law, should be made legal, and who are not sure\n\n    -   among those who are 18-49 years old and\n    -   among those who are 50+ years old.\n\n### Question 6\n\na.  Create a visualization that can be used to evaluate the relationship between `age` and `opinion` on legalizing medical marijuana in North Carolina based on this survey's results.\n\n    ::: callout-tip\n    Your visualization should display the proportions you calculated in Question 5d.\n    :::\n\nb.  Based on your calculations so far, as well as your visualization, write 1-2 sentences that describe the relationship, in this sample, between age and opinion on legalizing medical marijuana in North Carolina.\n\n::: render-commit-push\nRender, commit, and push one last time.\nMake sure that you commit and push all changed documents and that your Git pane is completely empty before proceeding.\n:::\n\n## Part 4 - `mtcars`\n\nIn this part, you'll work with one of the most basic and overused datasets in R: `mtcars`.\nThe data in this dataset come from the 1974 Motor Trend US magazine (so, yes, they're old!) and provide information on fuel efficiency and other car characteristics.\n\n### Question 7\n\nSince the dataset is used in many code examples, it's not unexpected that some analyses of the data are good and some not so much.\n\n::: callout-tip\nFor both parts of this question, you should review the data dictionary that is in the documentation for the dataset which you can find at <https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html> or by typing `?mtcars` in your Console.\n:::\n\na\\.\nYou come across the following visualization of these data.\nFirst, determine what is wrong with this visualization and describe it in one sentence.\nThen, fix and improve the visualization.\nAs part of your improvement, make sure your legend\n\n-   is on top of the plot,\n-   is informative, and\n-   lists levels in the order they appear in the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg, color = am)) +\n  geom_point() +\n  labs(\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles / gallon\"\n  )\n```\n:::\n\n\n\nb\\.\nUpdate your plot from part (a) further, this time using different shaped points for cars with V-shaped and straight engines.\nOnce again, some requirements for your legend – it should be informative and on the right of the plot.\n\n### Question 8\n\nYour task is to make your plot from Question 7b as ugly and as ineffective as possible.\nChange colors, axes, fonts, themes, or anything else you can think of in the code chunk below.\nYou can also search online for other themes, fonts, etc. that you want to tweak.\nTry to make it as ugly as possible, the sky is the limit!\nYou must make at least 5 updates to the plot.\n\nYour answer must include\n\n-   a list of the at least 5 updates you've made to your plot from Question 7b, and\n\n-   1-2 sentence explanation of why the plot you created is *ugly* (to you, at least) and ineffective.\n\n::: render-commit-push\nRender, commit, and push your work so far.\nMake sure that you commit and push all changed documents and that your Git pane is completely empty before proceeding.\n:::\n\n## Part 5 - All about Quarto\n\n### Question 9\n\nYou have the following code chunk:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + \n  geom_point()\n```\n:::\n\n\n\nAdd the following code cell options, one at a time, and set each to `false` and then to `true`.\nAfter each value, render your document and observe its effect.\nUltimately, choose the values that are the most appropriate for this code cell.\nBased on the behaviors you observe, describe what each code cell option does.\n\n-   `echo`\n\n-   `warning`\n\n-   `eval`\n\n### Question 10\n\na.  You have the following code cell again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + \n  geom_point()\n```\n:::\n\n\n\nAdd `fig-width` and `fig-asp` as code chunk options.\nTry setting `fig-width` to values between 1 and 10.\nTry setting `fig-asp` to values between 0.1 and 1.\nRe-render the document after each value and observe its effect.\nUltimately, choose values that make the plot look visually pleasing in the rendered document.\nBased on the behavior you observe, describe what each chunk option does.\n\n::: callout-tip\nNow that you've had more practice with figure sizing in Quarto documents, review all of the plots you made in this lab and adjust their widths and aspect rations to improve how they look in your rendered document.\n:::\n\nb\\.\nYou have the following code cell, but look carefully, it’s not exactly the same!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + \n  geom_point()\n```\n:::\n\n\n\nAdd `error` as a code chunk option and set it to `false` and then set it to `true`.\nAfter each value, render your document and observe its effect.\nUltimately, choose the value that allows you to render your document without altering the code.\nBased on the behavior you observe, describe what this code chunk option does.\n\n::: callout-tip\nReading [the documentation](https://quarto.org/docs/reference/formats/pdf.html#execution) might also be helpful.\n:::\n\n::: render-commit-push\nRender, commit, and push your work.\nMake sure that you commit and push all changed documents and that your Git pane is completely empty before proceeding.\n:::\n",
    "supporting": [
      "lab-4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}