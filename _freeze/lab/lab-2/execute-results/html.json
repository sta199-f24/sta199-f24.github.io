{
  "hash": "ca5e33a20d77a9e71649c83500702fdc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 2\nsubtitle: Revisiting the Midwest\ncategories: Lab\ndescription: \"Due Mon, Sep 23 at 8:30 am\"\ndraft: false\n---\n\n\n\n# Introduction\n\nIn this lab, you'll continue to hone your data science workflow and integrate what you learned so far in the course (data visualization) with what's coming up (data wrangling).\n\n::: callout-note\nThis lab assumes you've completed [Lab 0](/labs/lab-0.html) and [Lab 1](/labs/lab-1.html) and doesn't repeat setup and overview content from those labs.\nIf you haven't done those yet, you should review them before starting with this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be able to create transform data using `dplyr`\n-   Build on your mastery of data visualizations using `ggplot2`\n-   Get more experience with data science workflow using R, RStudio, Git, and GitHub\n-   Further your reproducible authoring skills with Quarto\n-   Improve your familiarity with version control using Git and GitHub\n\n## Getting started\n\n### Step 1: Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and log in with your Duke NetID and Password.\n-   Click `STA198-199` under My reservations to log into your container. You should now see the RStudio environment.\n\n### Step 2: Clone the repo & start a new RStudio project\n\n-   Go to the course organization at [github.com/sta199-f24](https://github.com/sta199-f24) organization on GitHub.\n    Click on the repo with the prefix **lab-2**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button and select **Use SSH** (this might already be selected by default; if it is, you'll see the text **Clone with SSH**).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-2.qmd* to open the template Quarto file.\n    This is where you will write up your code and narrative for the lab.\n\n### Step 3: Update the YAML\n\nIn `lab-2.qmd`, update the `author` field to your name, render your document, and examine the changes.\nThen, in the Git pane, click on **Diff** to view your changes, add a commit message (e.g., \"Added author name\"), and click **Commit**.\nThen, push the changes to your GitHub repository and, in your browser, confirm that these changes have indeed propagated to your repository.\n\n::: callout-important\nIf you encounter any issues with the above steps, flag a TA for help before proceeding.\n:::\n\n## Packages\n\nIn this lab, we will work with the **tidyverse** package, a collection of packages for performing data analysis in a \"tidy\" way.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package so that its features (the functions and datasets in it) are accessible from your *Console*.\n-   Then, **render** the document that loads this package to make its features (the functions and datasets in it) available for other code cells in your Quarto document.\n\n## Guidelines\n\nAs we've discussed in the lecture, your plots should include an informative title, axes and legends should have human-readable labels and aesthetic choices should be carefully considered.\n\nAdditionally, code should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be line breaks after each `+` when building a `ggplot`,\n\n-   there should also be line breaks after each `|>` in a data transformation pipeline,\n\n-   code should be properly indented,\n\n-   there should be spaces around `=` signs and spaces after commas.\n\nFurthermore, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus, not novellas, when writing code!\n\nAs you complete the lab and other assignments in this course, remember to develop a sound workflow for reproducible data analysis.\nThis assignment will periodically remind you to render, commit, and push your changes to GitHub.\n\n::: callout-important\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Part 1\n\n**All about `group_by()`!**\n\nUse the following data frame for Question 1 and Question 2:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  var_1 = c(10, 20, 30, 40, 50),\n  var_2 = c(\"Pizza\", \"Burger\", \"Pizza\", \"Pizza\", \"Burger\"),\n  var_3 = c(\"Apple\", \"Apple\", \"Pear\", \"Pear\", \"Banana\")\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  var_1 var_2  var_3 \n  <dbl> <chr>  <chr> \n1    10 Pizza  Apple \n2    20 Burger Apple \n3    30 Pizza  Pear  \n4    40 Pizza  Pear  \n5    50 Burger Banana\n```\n\n\n:::\n:::\n\n\n\n### Question 1\n\nGrouping by a single variable.\n\na\\.\nWhat does the following code chunk do?\nRun it, analyze the result, and articulate in words what `arrange()` does.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  arrange(var_2)\n```\n:::\n\n\n\nb\\.\nWhat does the following code chunk do?\nRun it, analyze the result, and articulate in words what `group_by()` does.\nAlso, comment on how it's different from the `arrange()` in part (a).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2)\n```\n:::\n\n\n\nc\\.\nWhat does the following code chunk do?\nRun it, analyze the result, and articulate in words what the pipeline does.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\n### Question 2\n\nGrouping by two variables.\n\na\\.\nWhat does the following code chunk do?\nRun it, analyze the result, and articulate in words what the pipeline does.\nThen, comment on what the message says.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\nb\\.\nWhat does the following code chunk do?\nRun it, analyze the result, and articulate in words what the pipeline does, especially mentioning what the `.groups` argument does.\nHow is the output different from the one in part (d)?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n```\n:::\n\n\n\nc\\.\nWhat do the following pipelines do?\nRun both, analyze their results, and articulate in words what each pipeline does.\nHow are the outputs of the two pipelines different?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n\ndf |>\n  group_by(var_2, var_3) |>\n  mutate(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answers for Questions 1 and 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Part 2\n\n**Back to the Midwest!**\n\nIn this part, you will revisit and build on some of your findings from Lab 1, where you explored the `midwest` data frame.\nRemember that this data frame is bundled with the **ggplot2** package and is automatically loaded when you load the tidyverse package.\nAs a refresher, the data contains demographic characteristics of counties in the Midwest region of the United States.\nYou can read the documentation for the data set, including variable definitions, by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n### Question 3\n\nCalculate the number of counties in each state and display your results in descending order of number of counties.\nWhich state has the highest number of counties, and how many?\nWhich state has the lowest number, and how many?\n\n::: callout-note\nThe number of counties in a state can change over time, so the values you see in this output may not be true today.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nWhile two counties in a given state can't have the same name, some county names might be shared across states.\nA classmate says \"Look at that, there is a county called \\_\\_\\_ in each state in this dataset!\" In a single pipeline, discover all counties that could fill in the blanks.\nYour response should be a data frame with only the county names that could fill in the blank and the number of times they appear in the data.\n\n::: callout-tip\nYou will want to use the `filter()` function in your answer, which requires a logical condition to describe what you want to filter for.\nFor example, `filter(x > 2)` means filter for values of `x` greater than 2, and `filter(y <= 3)` means filter for values of y less than or equal to 3.\n\nThe table below is a summary of logical operators and how to articulate them in R.\n\n| operator      | definition                |\n|---------------|---------------------------|\n| `<`           | less than                 |\n| `<=`          | less than or equal to     |\n| `>`           | greater than              |\n| `>=`          | greater than or equal to  |\n| `==`          | exactly equal to          |\n| `!=`          | not equal to              |\n| `x & y`       | `x` AND `y`               |\n| `x` \\| `y`    | `x` OR `y`                |\n| `is.na(x)`    | test if `x` is `NA`       |\n| `!is.na(x)`   | test if `x` is not `NA`   |\n| `x %in% y`    | test if `x` is in `y`     |\n| `!(x %in% y)` | test if `x` is not in `y` |\n| `!x`          | not `x`                   |\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 5\n\nReturn to the following box plot of population densities where you were asked to identify at least one outlier.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/popdensity-boxplot-1.png){width=480}\n:::\n:::\n\n\n\nIn this question, we want you to revisit this box plot and identify the counties described in each section.\n\na\\.\nThe counties with a population density higher than 25,000.\nYour code must use the `filter()` function.\n\nb\\.\nThe county with the highest population density.\nYour code must use the `max()` function.\n\nAnswer using a single data wrangling pipeline for each part.\nYour response should be a data frame with five columns: county name, state name, population density, total population, and area, in this order.\nIf your response has multiple rows, the data frame should be arranged in descending order of population density.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 5\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 6\n\nIn Lab 1 you were also asked to describe the distribution of population densities.\nThe following is one acceptable description that touches on the shape, center, and spread of this distribution.\nCalculate the values that should go into the blanks.\n\n> The distribution of population density of counties is unimodal and extremely right-skewed.\n> A typical Midwestern county has population density of \\_\\_\\_\\_ people per unit area.\n> The middle 50% of the counties have population densities between \\_\\_\\_ to \\_\\_\\_ people per unit area.\n\n::: callout-tip\nThink about which measures of center and spread are appropriate for skewed distributions.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 6\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 7\n\nAnother visualization from Lab 1 was the following, which showed the proportion of urban counties in each state.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/metro-barplot-1.png){width=672}\n:::\n:::\n\n\n\nCalculate these proportions in a single data pipeline.\n\n::: callout-tip\nRemember, you'll first need to create a new variable called `metro` which takes on the value `Yes` if the value of `inmetro` is 1, and `No` otherwise.\nYou can refer to [Lab 1](/labs/lab-1.html#question-6) if you need a refresher on how to do this.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 7\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 8\n\nReturn to the following scatter plot of percentage below poverty vs. percentage of people with a college degree, where the color and shape of points are determined by `state` where you were asked to identify at least one county that is a clear outlier by name.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/percollege-percbelowpoverty-scatterplot-1.png){width=480}\n:::\n:::\n\n\n\na\\.\nIn a single pipeline, identify the observations marked in the orange square in the upper left corner.\nYour answer should be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nb\\.\nIn a single pipeline, identify the observations marked in the red square in the plot above.\nYour answer should again be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nc\\.\nBring your answers from part (a) and part (b) together!\nIn a single pipeline, and a single `filter()` statement, identify the observations marked in the red and orange square in the plot above.\nYour answer should again be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nd\\.\nCreate a new variable in `midwest` called `potential_outlier`.\nThis variable should take on the value:\n\n-   `Yes` if the point is one the ones you identified in part (c), i.e., one of the points marked in the squares in the plot above.\n\n-   `No` otherwise.\n\nThen, display the updated `midwest` data frame, with county, state, percentage below poverty, percentage college educated, `potential_outlier` as the selected variables, arranged in ascending order of `potential_outlier`.\n\nc\\.\nRecreate the visualization above, i.e., a scatterplot of the percentage below poverty vs. the percentage of people with a college degree.\nHowever, color the points by the newly created `potential_outlier` variable instead of the state.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 8\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 9\n\na\\.\nIn a single pipeline, calculate the total population for each state and save the resulting data frame as `state_population` and display it in descending order of total population.\n\nb\\.\nThen, in a separate pipeline, calculate the proportion of the total population in each state and, once again, display the results in descending order of proportion of population.\n\n::: callout-tip\nIn answering parts (a) and (b), you'll create two new variables, one for the total population and the other for the proportion of total proportion.\nMake sure to give them \"reasonable\" names – short but evocative.\n:::\n\ne\\.\nWhich Midwestern state is most populous, and what percent of the Midwest population lives there?\nWhich is the least populous and what percent lives there?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 9\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 10\n\nCalculate the average percentage below poverty for each state and save the resulting data frame as `state_poverty` with the columns `state` and `mean_percbelowpoverty`.\n\nThen, in a new pipeline, display the `state_poverty` data frame in ascending order of `mean_percbelowpoverty`.\nWhich state has the lowest average percentage below poverty across its counties?\nWhich state has the highest average percentage below poverty across its counties?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 10\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n# Wrap-up\n\n## Submission\n\nOnce you are finished with the lab, you will submit your final PDF document to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nTo be considered \" on time, \" you must turn in a PDF file to the Gradescope page by the submission deadline.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with each question. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n-   selected pages associated with each question on Gradescope\n:::\n\n## Grading and feedback\n\n-   Some of the questions will be graded for accuracy.\n\n-   Some will be graded for completion.\n\n-   There are also workflow points, for coding style, for committing at least three times as you work through your lab, and for overall organization.\n\n-   You'll receive feedback on your lab on Gradescope within a week.\n",
    "supporting": [
      "lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}