{
  "hash": "094990ca169afb7b5ce43c0e70f5c64a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with Generative AI tools\"\nsubtitle: \"Lecture 12\"\ndate: \"2024-10-10\"\nformat: \n  live-revealjs: \n    output-file: 12-gen-ai-slides.html\nwebr:\n  cell-options:\n    autorun: false\n  packages:\n    - tidyverse\n  resources:\n    - https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/tv.csv\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\ntv <- read_csv(\"https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/tv.csv\")\n```\n:::\n\n\n\n\n\n\n\n<!-- end: webr fodder -->\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\nPrepare for today's application exercise: **ae\\-11\\-un\\-votes\\-revisit\\-chatgpt**\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-11\\-un\\-votes\\-revisit\\-chatgpt\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n\n## Announcements {.smaller}\n\n-   Midterm take-home due at 5:00 pm tomorrow (Friday, Oct 11)\n    -   Upload to Gradescope **and**\n    -   Commit and push to your GitHub repo\n\n. . .\n\n-   Midsemester course evaluation due at midnight tonight (optional) -- there will be some time at the end of class today to fill them out\n\n-   Peer evaluation 1 due by 5:00 pm next Friday (Oct 18) -- look for an email from TEAMMATES\n\n-   Readings and videos for next Thursday's class posted on the course website\n\n# Code smell and style\n\n## Code smell {.smaller}\n\n> One way to look at smells is with respect to principles and quality: \"Smells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality\".\n> Code smells are usually not bugs; they are not technically incorrect and do not prevent the program from functioning.\n> Instead, they indicate weaknesses in design that may slow down development or increase the risk of bugs or failures in the future.\n\n::: aside\nSource: [Code smell on Wikipedia](https://en.wikipedia.org/wiki/Code_smell)\n:::\n\n## Code style {.smaller}\n\nFollow the [Tidyverse style guide](https://style.tidyverse.org/):\n\n-   Spaces before and line breaks after each `+` when building a ggplot\n\n-   Spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   Proper indentation\n\n-   Spaces around `=` signs and spaces after commas\n\n-   Lines should not span more than 80 characters, long lines should be broken up with each argument on its own line\n\n## ae\\-11\\-un\\-votes\\-revisit\\-chatgpt {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-11\\-un\\-votes\\-revisit\\-chatgpt\\.qmd*.\n\n-   Work through Part 1 of the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n\n# The 🐘 in the room: Chat GPT (and friends)\n\n## Take a pulse\n\n::: question\nHow are you using Chat GPT or similar AI tools for this class?\n:::\n\n## Example 1 - From Lab 4 {.smaller .scrollable}\n\n::: question\nSurveyUSA polled 900 NC adults between September 4-7, 2024.\nOf the 900 NC adults, 771 were identified by SurveyUSA as being registered to vote.\nThe following question was asked to these 771 adults: \"Should the use of marijuana for medical use remain against the law in North Carolina? Or be legalized?\"\n\nOf the 771 responses, 391 were between the ages of 18-49.\nOf the individuals that are between 18-49, 59 individuals responded that they think medical marijuana should remain against the law, 292 said it should be made legal, and the remainder were not sure.\nOf the individuals that are 50+, 67 individuals responded that they think medical marijuana should remain against the law, 245 said it should be made legal, and the remainder were not sure.\n\nCalculate the proportions of 18-49 year olds and 50+ year-olds in this sample.\nmake sure the result is an ungrouped data frame with a column for relevant counts, a column for relevant proportions, and a column for the groups you’re interested in.\n:::\n\n## Chat GPT - Take 1 prompt {.smaller .scrollable}\n\n::: question\nWhat is wrong with this prompt?\nHow would you correct it?\n:::\n\n> SurveyUSA polled 900 NC adults between September 4-7, 2024.\n> Of the 900 NC adults, 771 were identified by SurveyUSA as being registered to vote.\n> The following question was asked to these 771 adults: \"Should the use of marijuana for medical use remain against the law in North Carolina? Or be legalized?\"\n\n> Of the 771 responses, 391 were between the ages of 18-49.\n> Of the individuals that are between 18-49, 59 individuals responded that they think medical marijuana should remain against the law, 292 said it should be made legal, and the remainder were not sure.\n> Of the individuals that are 50+, 67 individuals responded that they think medical marijuana should remain against the law, 245 said it should be made legal, and the remainder were not sure.\n\n> Calculate the proportions of 18-49 year olds and 50+ year-olds in this sample.\n> Make sure the result is an ungrouped data frame with a column for relevant counts, a column for relevant proportions, and a column for the groups you’re interested in.\n\n## Chat GPT - Take 1 response\n\n::: question\nIdentify at least one mistake or code smell/style issue with the code below.\n:::\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\nlibrary(dplyr)\n\n# Create the initial data frame with counts\nsurvey_counts <- tibble( \n  age = c(\"18-49\", \"18-49\", \"18-49\", \"50+\", \"50+\", \"50+\"),\n  opinion = c(\"Against\", \"Legal\", \"Not sure\", \"Against\", \"Legal\", \"Not sure\"),\n  n = c(59, 292, 40, 67, 245, 59)\n)\n\n# Group by age and summarize total counts\nage_totals <- survey_counts %>%\n  group_by(age) %>%\n  summarize(total_count = sum(n)) %>%\n  ungroup()\n\n# Calculate the overall total\noverall_total <- sum(age_totals$total_count)\n\n# Add the proportion column\nage_totals <- age_totals %>%\n  mutate(proportion = total_count / overall_total)\n\n# Resulting data frame\nage_totals\n```\n:::\n\n\n\n\n\n\n\n## ae\\-11\\-un\\-votes\\-revisit\\-chatgpt {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-11\\-un\\-votes\\-revisit\\-chatgpt\\.qmd*.\n\n-   Work through Part 2 of the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n\n## Let's follow along with Chat GPT...\n\n<https://chatgpt.com/share/6707d8c3-98c4-8000-9732-e65bc5be916b>\n\n## Example 2 {.smaller}\n\n::: question\nEach CSI franchise includes a number of series, each with the character string `\"CSI\"` (in capital letters) in their title.\nUsing this information, create a new data frame called `csi` that only has titles from the CSI-verse and all of the columns from `tv` for these titles.\nThen, display the first 10 rows of `csi`.\n**Note:** The titles and seasons included in the dataset may not be all CSI titles and titles that have ever aired.\n:::\n\n## Chat GPT - Take 1 prompt\n\n> Each CSI franchise includes a number of series, each with the character string `\"CSI\"` (in capital letters) in their title.\n> Using this information, create a new data frame called `csi` that only has titles from the CSI-verse and all of the columns from `tv` for these titles.\n> Then, display the first 10 rows of `csi`.\n> **Note:** The titles and seasons included in the dataset may not be all CSI titles and titles that have ever aired.\n\n## Chat GPT - Take 1 response {.xsmall}\n\n> Certainly!\n> To filter the `tv` data frame to include only titles from the CSI-verse, you can use the `filter` function from the `dplyr` package.\n> Here's the code:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(str_detect(title, \"CSI\", case_insensitive = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses the `filter` function to select rows where the `title` column contains the string \"CSI\" (case-insensitive).\n> The resulting data frame, `csi`, will include only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Chat GPT - Take 1 code {.xsmall}\n\n::: question\nWhat is wrong with the following code?\n:::\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n#| message: false\ntv <- read_csv(\"data/tv.csv\")\n```\n:::\n\n::: {.cell}\n```{webr}\nlibrary(dplyr)\n\n# Assuming your dataset is named 'tv'\ncsi <- tv %>%\n  filter(str_detect(title, \"CSI\", case_insensitive = TRUE))\n\n# Display the first 10 rows of the 'csi' data frame\nhead(csi, 10)\n```\n:::\n\n\n\n\n\n\n\n## Chat GPT - Take 2 prompt\n\n> str_detect doesn't have a case_insensitive argument, can you try again?\n\n## Chat GPT - Take 2 response {.xsmall}\n\n> You are correct, and I appreciate your understanding.\n> The `str_detect` function itself doesn't have a `case_insensitive` argument.\n> Instead, you can use the `str_which` function along with the `case_insensitive` argument in the `filter` function.\n> Here's the corrected code:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(str_detect(title, \"CSI\", ignore_case = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses `str_detect` within the `filter` function and includes the `ignore_case = TRUE` argument to perform a case-insensitive search.\n> The resulting `csi` data frame will contain only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Chat GPT - Take 2 code {.smaller}\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n#| error: true\n\nlibrary(dplyr)\n\n# Assuming your dataset is named 'tv'\ncsi <- tv %>%\n  filter(str_detect(title, \"CSI\", ignore_case = TRUE))\n\n# Display the first 10 rows of the 'csi' data frame\nhead(csi, 10)\n```\n:::\n\n\n\n\n\n\n\n## Chat GPT - Take 3 prompt\n\n> str_detect doesn't have an ignore_case argument either, can you try again?\n\n## Chat GPT - Take 3 response {.xsmall}\n\n> I apologize for the oversight.\n> It seems there was a mistake in my responses.\n> To perform a case-insensitive search, you can use the `stringi` package along with `stri_detect_regex`.\n> Here's the corrected code:\n>\n> ``` r\n> library(dplyr)\n> library(stringi)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(stri_detect_regex(title, \"CSI\", case_insensitive = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses `stri_detect_regex` from the `stringi` package within the `filter` function, and it includes the `case_insensitive = TRUE` argument for a case-insensitive search.\n> The resulting `csi` data frame will contain only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Let's go back to Take 1 {.smaller}\n\nand edit it a bit:\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\ntv |>\n  filter(str_detect(title, \"CSI\"))\n```\n:::\n\n\n\n\n\n\n\n## Let's go back to Take 1 {.smaller}\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\ncsi <- tv |>\n  filter(str_detect(title, \"CSI\"))\n\ncsi\n```\n:::\n\n\n\n\n\n\n\n## Guidelines and best practices for using Chat GPT {.smaller}\n\n::: incremental\n-   Do [**not**]{.underline} just copy-paste the prompt – for appropriate academic conduct, for your own learning, and for getting to better results faster\n-   Engineer the prompt until the response starts to look like code you're learning in the course\n-   If the response is not correct, ask for a correction\n-   If the response doesn't follow the guidelines, ask for a correction\n-   When you ask for a correction, be ready for it to \"correct\" (i.e., change) more than you asked for\n-   Do not just copy-paste code from Chat GPT responses, run it line-by-line and edit as needed -- Chat GPT does not execute R code so there's no guarantee any of the code it gives you works\n-   Watch out for clear mistakes in the response: do not keep loading packages that are already loaded, use the base pipe `|>`, use the tidyverse style, do not use unnecessary `print()` statements, be critical of code smell, etc.\n:::\n\n# Time permitting\n\n## Midsemester course evaluation\n\nTake a few minutes to fill it out on Canvas \\> Quizzes\n\n-   Anonymous\n\n-   Optional\n\n-   Much appreciated!\n\nAnd good luck with the rest of the take-home midterm!\n♥️\n",
    "supporting": [
      "12-gen-ai_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}