{
  "hash": "228123d7fc0220dc09ad13aa34125435",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"Lecture 8\"\ndate: \"2024-09-24\"\nformat: \n  live-revealjs: \n    output-file: 08-data-types-classes-slides.html\n    webr:\n      cell-options:\n        autorun: false\nwebr:\n  packages:\n    - tidyverse\n  resources:\n    - https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/refs/heads/main/slides/data/survey-2024-09-24.csv\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\nsurvey <- read_csv(\"survey-2024-09-24.csv\") |>\n  rename(\n    tue_classes = `How many classes do you have on Tuesdays?`,\n    year = `What year are you?`\n  )\n```\n:::\n\n\n\n\n<!-- end: webr fodder -->\n\n<!--# hello -->\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\n:::::: columns\n::: {.column width=\"35%\"}\n\n\n\n{{< qrcode https://forms.gle/J9Giy9sytk4KxVFo8 >}}\n\n\n\n\n\n\n<iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSc9frzLIsVXJdrKrWxetCXtffs8C2sGv-UNFD3egfRNUtA3Pw/viewform?embedded=true\" width=\"350\" height=\"400\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading…</iframe>\n:::\n\n:::: {.column width=\"65%\"}\nPrepare for today's application exercise: **ae\\-08\\-durham\\-climate\\-factors**\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-08\\-durham\\-climate\\-factors\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n::::\n::::::\n\n## Lab 1 feedback {.smaller}\n\n::: incremental\n-   Describing a distribution:\n    -   shape (modality and skewness)\n    -   center (with calculated value or estimated value or range)\n    -   spread (with calculated value or estimated value or range)\n    -   unusual observations (and, where possible, explanation for why they're unusual)\n-   Describing a relationship:\n    -   direction (positive or negative)\n    -   form (linear or non-linear)\n    -   strength\n    -   unusual observations (and, where possible, explanation for why they're unusual)\n:::\n\n## Lab 1 commits\n\n![](images/08/lab-1-commits.png)\n\n## Regrade request policy {.smaller}\n\n<https://sta199-f24.github.io/course-syllabus.html#regrade-requests>\n\n::: incremental\n-   Considered for errors in grade calculation or if a correct answer was mistakenly marked as incorrect\n\n-   Not a mechanism for:\n\n    -   disputing the number of points deducted for an incorrect response\n    -   asking for clarification on feedback (come to office hours instead)\n\n-   Due on Gradescope within a week after an assignment is returned\n\n-   The entire assignment may be regraded, which could result in an adjustment in either direction\n\n-   No regrade requests after the final exam has been administered\n:::\n\n# Data types\n\n## How many classes do you have on Tuesdays?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 3\n   Timestamp     How many classes do you have o…¹ `What year are you?`\n   <chr>         <chr>                            <chr>               \n 1 9/23/24 19:57 2                                Sophomore           \n 2 9/23/24 19:58 3                                First-year          \n 3 9/23/24 20:06 2                                Sophomore           \n 4 9/23/24 20:09 2                                Sophomore           \n 5 9/23/24 21:48 0                                Senior              \n 6 9/24/24 9:44  2                                First-year          \n 7 9/24/24 10:15 2                                Senior              \n 8 9/24/24 10:50 2                                Sophomore           \n 9 9/24/24 10:54 3                                First-year          \n10 9/24/24 11:08 2                                Senior              \n# ℹ 51 more rows\n# ℹ abbreviated name: ¹​`How many classes do you have on Tuesdays?`\n```\n\n\n:::\n:::\n\n\n\n\n## `rename()` variables\n\nTo make them easier to work with...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey <- survey |>\n  rename(\n    tue_classes = `How many classes do you have on Tuesdays?`,\n    year = `What year are you?`\n  )\n```\n:::\n\n\n\n\n## Variable types\n\n::: question\nWhat type of variable is `tue_classes`?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 3\n   Timestamp     tue_classes year      \n   <chr>         <chr>       <chr>     \n 1 9/23/24 19:57 2           Sophomore \n 2 9/23/24 19:58 3           First-year\n 3 9/23/24 20:06 2           Sophomore \n 4 9/23/24 20:09 2           Sophomore \n 5 9/23/24 21:48 0           Senior    \n 6 9/24/24 9:44  2           First-year\n 7 9/24/24 10:15 2           Senior    \n 8 9/24/24 10:50 2           Sophomore \n 9 9/24/24 10:54 3           First-year\n10 9/24/24 11:08 2           Senior    \n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Let's (attempt to) clean it up... {.scrollable}\n\n\n\n\n::: {.cell}\n```{webr}\nsurvey |>\n  ___\n```\n:::\n\n\n\n\n# Data types\n\n## Data types in R\n\n-   **logical**\n-   **double**\n-   **integer**\n-   **character**\n-   and some more, but we won't be focusing on those\n\n## Logical & character\n\n::::: columns\n::: column\n**logical** - Boolean values `TRUE` and `FALSE`\n\n<br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column .fragment}\n**character** - character strings\n\n<br> <br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(\"First-year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## Double & integer\n\n::::: columns\n::: column\n**double** - floating point numerical values (default numerical type)\n\n<br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(2.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column .fragment}\n**integer** - integer numerical values (indicated with an `L`)\n\n<br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## Concatenation {.smaller}\n\nVectors can be constructed using the `c()` function.\n\n-   Numeric vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n-   Character vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"Hello\", \"World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello\"  \"World!\"\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n-   Vector made of vectors:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(c(\"hi\", \"hello\"), c(\"bye\", \"jello\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hi\"    \"hello\" \"bye\"   \"jello\"\n```\n\n\n:::\n:::\n\n\n\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::::: columns\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column .fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\" \"2\" \"3\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::::: columns\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column .fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, \"Just this one!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"              \"Just this one!\"\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\nR will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(FALSE, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 3\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1.2, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.2 3.0\n```\n\n\n:::\n:::\n\n\n\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2L, \"two\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"   \"two\"\n```\n\n\n:::\n:::\n\n\n\n\n## Explicit vs. implicit coercion\n\n::::: columns\n::: column\n**Explicit coercion:**\n\nWhen you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`.\n:::\n\n::: {.column .fragment}\n**Implicit coercion:**\n\nHappens when you use a vector in a specific context that expects a certain type of vector.\n:::\n:::::\n\n# Data classes\n\n## Data classes {.smaller}\n\n::: incremental\n-   Vectors are like Lego building blocks\n-   We stick them together to build more complicated constructs, e.g. *representations of data*\n-   The **class** attribute relates to the S3 class of an object which determines its behaviour\n    -   You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious\n-   Examples: factors, dates, and data frames\n:::\n\n## Factors {.smaller}\n\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_years <- factor(\n  c(\n    \"First-year\", \"Sophomore\", \"Sophomore\", \"Senior\", \"Junior\"\n    )\n  )\nclass_years\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] First-year Sophomore  Sophomore  Senior     Junior    \nLevels: First-year Junior Senior Sophomore\n```\n\n\n:::\n:::\n\n\n\n\n::::: columns\n::: {.column .fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column .fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## More on factors\n\nWe can think of factors like character (level labels) and an integer (level numbers) glued together\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 4 levels \"First-year\",\"Junior\",..: 1 4 4 3 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4 4 3 2\n```\n\n\n:::\n:::\n\n\n\n\n## Dates\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- as.Date(\"2024-09-24\")\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-09-24\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\n\n\n## More on dates\n\nWe can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19990\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today) / 365 # roughly 55 yrs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54.76712\n```\n\n\n:::\n:::\n\n\n\n\n## Data frames\n\nWe can think of data frames like like vectors of equal length glued together\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:2, y = 3:4)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n\n\n::::: columns\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n:::\n:::::\n\n## Lists {.smaller}\n\nLists are a generic vector container; vectors of any type can go in them\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4\"}\nl <- list(\n  x = 1:4,\n  y = c(\"hi\", \"hello\", \"jello\"),\n  z = c(TRUE, FALSE)\n)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"hi\"    \"hello\" \"jello\"\n\n$z\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n\n## Lists and data frames {.smaller}\n\n-   A data frame is a special list containing vectors of equal length\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n\n\n-   When we use the `pull()` function, we extract a vector from the data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  pull(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4\n```\n\n\n:::\n:::\n\n\n\n\n# Working with factors\n\n## Read data in as character strings\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 3\n   Timestamp     tue_classes year      \n   <chr>         <chr>       <chr>     \n 1 9/23/24 19:57 2           Sophomore \n 2 9/23/24 19:58 3           First-year\n 3 9/23/24 20:06 2           Sophomore \n 4 9/23/24 20:09 2           Sophomore \n 5 9/23/24 21:48 0           Senior    \n 6 9/24/24 9:44  2           First-year\n 7 9/24/24 10:15 2           Senior    \n 8 9/24/24 10:50 2           Sophomore \n 9 9/24/24 10:54 3           First-year\n10 9/24/24 11:08 2           Senior    \n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## But coerce when plotting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey, mapping = aes(x = year)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](08-data-types-classes_files/figure-revealjs/unnamed-chunk-41-1.png){width=100%}\n:::\n:::\n\n\n\n\n## Use forcats to reorder levels {.scrollable}\n\n\n\n\n::: {.cell}\n```{webr}\n#| out-width: 100%\n#| fig-width: 7\n#| fig-asp: 0.5\nsurvey |>\n  ___\n```\n:::\n\n\n\n\n## A peek into forcats {.smaller}\n\nReordering levels by:\n\n-   `fct_relevel()`: hand\n\n-   `fct_infreq()`: frequency\n\n-   `fct_reorder()`: sorting along another variable\n\n-   `fct_rev()`: reversing\n\n...\n\n. . .\n\nChanging level values by:\n\n-   `fct_lump()`: lumping uncommon levels together into \"other\"\n\n-   `fct_other()`: manually replacing some levels with \"other\"\n\n...\n",
    "supporting": [
      "08-data-types-classes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}