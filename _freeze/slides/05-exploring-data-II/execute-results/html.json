{
  "hash": "69ca33c74b76c58269c47e70c6c8d424",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring data II\"\nsubtitle: \"Lecture 5\"\ndate: \"2024-09-12\"\nformat: \n  live-revealjs: \n    output-file: 05-exploring-data-II-slides.html\n    webr:\n      cell-options:\n        autorun: false\nwebr:\n  packages:\n    - tidyverse\n    - ggthemes\n    - usdata\n---\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\n```\n:::\n\n\n\n\n<!-- end: webr fodder -->\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\nPrepare for today's application exercise: **ae\\-05\\-gerrymander\\-explore\\-II**\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-05\\-gerrymander\\-explore\\-II\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n\n## Reminder: Lab guidelines\n\n::: {.incremental .xsmall}\n-   Plots should include an informative title, axes and legends should have human-readable labels, and careful consideration should be given to aesthetic choices.\n\n-   Code should follow the [tidyverse style](https://style.tidyverse.org/) ([style.tidyverse.org](https://style.tidyverse.org/)) Particularly,\n\n    -   space before and line breaks after each `+` when building a `ggplot`\n    -   space before and line breaks after each `|>` in a data transformation pipeline\n    -   code should be properly indented\n    -   spaces around `=` signs and spaces after commas\n\n-   All code should be visible in the PDF output, i.e., should not run off the page on the PDF.\n    Long lines that run off the page should be split across multiple lines with line breaks.\n    **Tip:** Haikus not novellas when writing code!\n\n-   At least three commits with meaningful commit messages.\n:::\n\n## Code style and readability\n\n- Whydowecareaboutthestyleandreadabilityofyourcode? [$\\rightarrow$ Why do we care about the style and readability of your code?]{.fragment}\n\n. . .\n\n- Je voudrais un cafe [$\\rightarrow$ Je voudrais un café]{.fragment}\n\n\n# `gerrymander`\n\n## Packages {.smaller}\n\n-   For the data: [**usdata**](https://openintrostat.github.io/usdata/)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usdata)\n```\n:::\n\n\n\n\n-   For the analysis: [**tidyverse**](https://www.tidyverse.org/packages/) and [**ggthemes**](https://jrnold.github.io/ggthemes/)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ──────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n:::\n\n\n\n\n## From last time {.scrollable .smaller}\n\n::: question\nIs a Congressional District more likely to have high prevalence of gerrymandering if a Democrat was able to flip the seat in the 2018 election? Support your answer with a visualization as well as summary statistics.\n:::\n\n\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\nggplot(gerrymander, aes(x = flip18, fill = gerry)) +\n  geom_bar(position = \"fill\")\n```\n:::\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\ngerrymander |>\n  count(flip18, gerry) |>\n  group_by(flip18) |>\n  mutate(prop = n / sum(n))\n```\n:::\n\n\n\n\n# `group_by()`, `summarize()`, `count()`\n\n## What does `group_by()` do? {.scrollable}\n\n::: question\nWhat does `group_by()` do in the following pipeline?\n:::\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  count(flip18, gerry) |>\n  group_by(flip18) |>\n  mutate(prop = n / sum(n))\n```\n:::\n\n\n\n\n## Let's simplify! {.scrollable}\n\n::: question\nWhat does `group_by()` do in the following pipeline?\n:::\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  group_by(state) |>\n  summarize(mean_trump16 = mean(trump16))\n```\n:::\n\n\n\n\n## `group_by()`\n\n- Group by converts a data frame to a grouped data frame, where subsequent operations are performed once per group\n\n- `ungroup()` removes grouping\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  group_by(state) |>\n  ungroup()\n```\n:::\n\n\n\n\n## `group_by() |> summarize()` {.smaller}\n\nA common pipeline is `group_by()` and then `summarize()` to **calculate** summary statistics for each group:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(\n    mean_trump16 = mean(trump16),\n    median_trump16 = median(trump16)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 3\n   state mean_trump16 median_trump16\n   <chr>        <dbl>          <dbl>\n 1 AK            52.8           52.8\n 2 AL            62.6           64.9\n 3 AR            60.9           63.0\n 4 AZ            46.9           47.7\n 5 CA            31.7           28.4\n 6 CO            43.6           41.3\n 7 CT            41.0           40.4\n 8 DE            41.9           41.9\n 9 FL            47.9           49.6\n10 GA            51.3           56.6\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## `group_by() |> summarize()` {.smaller}\n\nThis pipeline can also be used to **count** number of observations for each group:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## `summarize()` {.smaller}\n\n```r\n... |>\n  summarize(\n    name_of_summary_statistic = summary_function(variable)\n  )\n```\n\n. . .\n\n- `name_of_summary_statistic`: Anything you want to call it! \n  - Recommendation: Keep it short and evocative\n\n- `summary_function()`: \n  - `n()`: number of observations\n  - `mean()`: mean\n  - `median()`: median\n  - ...\n\n\n## Spot the difference {.smaller}\n\n::: question\nWhat's the difference between the following two pipelines?\n:::\n\n::: columns\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  count(state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## `count()`\n\n::: columns\n::: {.column width=\"40%\"}\n```r\n... |>\n  count(variable)\n```\n:::\n::: {.column width=\"60%\"}\n```r\n... |>\n  count(variable1, variable2)\n```\n:::\n:::\n\n- Count the number of observations in each level of variable(s)\n\n- Place the counts in a variable called `n`\n\n## `count()` and `sort` {.scrollable}\n\n::: question\nWhat does the following pipeline do? Rewrite it with `count()` instead.\n:::\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n()) |>\n  arrange(desc(n))\n```\n:::\n\n\n\n\n# `mutate()`\n\n## Flip the question\n\n::: question\nIs a Congressional District more likely to have high prevalence of gerrymandering if a Democrat was able to flip the seat in the 2018 election?\n:::\n\nvs.\n\n::: question\nIs a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\n:::\n\n## Flipping vs. gerrymandering prevalence {.smaller}\n\n::: {.question .xsmall}\nThe following code should produce a visualization that answers the question \"Is a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\" However, it produces a `warning` and an unexpected plot. What's going on?\n:::\n\n::: columns\n::: column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  gerrymander, \n  aes(x = gerry, fill = flip18)\n  ) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The following aesthetics were dropped during statistical\ntransformation: fill.\nℹ This can happen when ggplot fails to infer the correct grouping\n  structure in the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a\n  numerical variable into a factor?\n```\n\n\n:::\n:::\n\n\n\n:::\n::: column\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-exploring-data-II_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Another glimpse at `gerrymander` {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(gerrymander)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 435\nColumns: 12\n$ district   <chr> \"AK-AL\", \"AL-01\", \"AL-02\", \"AL-03\", \"AL-04\", \"AL-…\n$ last_name  <chr> \"Young\", \"Byrne\", \"Roby\", \"Rogers\", \"Aderholt\", \"…\n$ first_name <chr> \"Don\", \"Bradley\", \"Martha\", \"Mike D.\", \"Rob\", \"Mo…\n$ party16    <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"D\", \"R\", \"R\",…\n$ clinton16  <dbl> 37.6, 34.1, 33.0, 32.3, 17.4, 31.3, 26.1, 69.8, 3…\n$ trump16    <dbl> 52.8, 63.5, 64.9, 65.3, 80.4, 64.7, 70.8, 28.6, 6…\n$ dem16      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0…\n$ state      <chr> \"AK\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"…\n$ party18    <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"D\", \"R\", \"R\",…\n$ dem18      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0…\n$ flip18     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ gerry      <fct> mid, high, high, high, high, high, high, high, mi…\n```\n\n\n:::\n:::\n\n\n\n\n## `mutate()`\n\n- We want to use `flip18` as a categorical variable\n\n- But it's stored as a numeric\n\n- So we need to change its type first, before we can use it as a categorical variable\n\n- The `mutate()` function transforms (*mutates*) a data frame by creating a new column or updating an existing one\n\n## `mutate()` in action {.scrollable}\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  mutate(flip18 = as.factor(flip18))\n```\n:::\n\n\n\n\n## Revisit the plot\n\n::: question\n\"Is a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\"\n:::\n\n\n\n\n::: {.cell}\n```{webr}\ngerrymander |>\n  mutate(flip18 = as.factor(flip18)) |>\n  ggplot(aes(x = gerry, fill = flip18)) +\n  geom_bar(position = \"fill\")\n```\n:::\n\n\n\n\n# Application exercise\n\n## ae\\-05\\-gerrymander\\-explore\\-II {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-05\\-gerrymander\\-explore\\-II\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n\n## Recap: aesthetic mappings\n\n- **Local** aesthetic mappings for a given `geom`\n\n- **Global** aesthetic mappings for all `geom`s\n\n\n\n\n\n",
    "supporting": [
      "05-exploring-data-II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}