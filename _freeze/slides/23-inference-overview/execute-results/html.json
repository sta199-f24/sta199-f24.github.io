{
  "hash": "8df045a1b8d99ba83bd46f52a1489ea0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Inference overview\"\nsubtitle: \"Lecture 23\"\ndate: \"2024-11-21\"\nformat: \n  live-revealjs: \n    output-file: 23-inference-overview-slides.html\nwebr:\n  cell-options:\n    autorun: false\n---\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\n```\n:::\n\n\n\n\n<!-- end: webr fodder -->\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-19\\-equality\\-randomization\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n\n# From last time: Randomization\n\n## Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)   # for data wrangling and visualization\nlibrary(tidymodels)  # for modeling\nlibrary(openintro)   # for Duke Forest dataset\nlibrary(scales)      # for pretty axis labels\nlibrary(glue)        # for constructing character strings\nlibrary(knitr)       # for neatly formatted tables\n```\n:::\n\n\n\n\n## Data: Houses in Duke Forest {.smaller}\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Data on houses that were sold in the Duke Forest neighborhood of Durham, NC around November 2020\n-   Scraped from Zillow\n-   Source: [`openintro::duke_forest`](http://openintrostat.github.io/openintro/reference/duke_forest.html)\n:::\n\n::: {.column width=\"50%\"}\n![](images/21/duke_forest_home.jpg){fig-alt=\"Home in Duke Forest\"}\n:::\n:::::\n\n## Setting hypotheses\n\n-   **Null hypothesis,** $H_0$: \"There is nothing going on.\" The slope of the model for predicting the prices of houses in Duke Forest from their areas is 0, $\\beta_1 = 0$.\n\n-   **Alternative hypothesis,** $H_A$: \"There is something going on\".\n    The slope of the model for predicting the prices of houses in Duke Forest from their areas is different than, $\\beta_1 \\ne 0$.\n\n## Calculate observed slope\n\n...\nwhich we have already done:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobserved_fit <- duke_forest |>\n  specify(price ~ area) |>\n  fit()\n\nobserved_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  term      estimate\n  <chr>        <dbl>\n1 intercept  116652.\n2 area          159.\n```\n\n\n:::\n:::\n\n\n\n\n## Simulate null distribution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5|6\"}\nset.seed(20241118)\nnull_dist <- duke_forest |>\n  specify(price ~ area) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 100, type = \"permute\") |>\n  fit()\n```\n:::\n\n\n\n\n## View null distribution {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 3\n# Groups:   replicate [100]\n   replicate term        estimate\n       <int> <chr>          <dbl>\n 1         1 intercept 547294.   \n 2         1 area           4.54 \n 3         2 intercept 568599.   \n 4         2 area          -3.13 \n 5         3 intercept 561547.   \n 6         3 area          -0.593\n 7         4 intercept 526286.   \n 8         4 area          12.1  \n 9         5 intercept 651476.   \n10         5 area         -33.0  \n# ℹ 190 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Visualize null distribution {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist |>\n  filter(term == \"area\") |>\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 15)\n```\n\n::: {.cell-output-display}\n![](23-inference-overview_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n\n## Visualize null distribution (alternative)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_dist) +\n  shade_p_value(obs_stat = observed_fit, direction = \"two-sided\")\n```\n\n::: {.cell-output-display}\n![](23-inference-overview_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n\n## Get p-value {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist |>\n  get_p_value(obs_stat = observed_fit, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the\n`generate()` step.\nℹ See `get_p_value()` (`?infer::get_p_value()`) for more information.\nPlease be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the\n`generate()` step.\nℹ See `get_p_value()` (`?infer::get_p_value()`) for more information.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  term      p_value\n  <chr>       <dbl>\n1 area            0\n2 intercept       0\n```\n\n\n:::\n:::\n\n\n\n\n## Make a decision\n\n::: task\nBased on the p-value calculated, what is the conclusion of the hypothesis test?\n:::\n\n# Inference for a mean\n\n## Estimating the average price of houses in Duke Forest\n\n::: task\nEstimate the average price of houses in Duke Forest with a 95% confidence interval.\n:::\n\n## Computing the CI for the mean I\n\nCalculate the observed **mean**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobserved_mean <- duke_forest |>\n  specify(response = price) |>\n  calculate(stat = \"mean\")\n\nobserved_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: price (numeric)\n# A tibble: 1 × 1\n     stat\n    <dbl>\n1 559899.\n```\n\n\n:::\n:::\n\n\n\n\n## Computing the CI for the mean II {.smaller}\n\nTake `1,000` bootstrap samples and calculate the mean of each one:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5\"}\nset.seed(1121)\n\nboot_means <- duke_forest |>\n  specify(response = price) |>\n  generate(reps = 100, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n\nboot_means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: price (numeric)\n# A tibble: 100 × 2\n   replicate    stat\n       <int>   <dbl>\n 1         1 591471.\n 2         2 545975.\n 3         3 588256.\n 4         4 569751.\n 5         5 566394.\n 6         6 583654.\n 7         7 533031.\n 8         8 575321.\n 9         9 559893.\n10        10 588826.\n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Computing the CI for the mean III\n\nCompute the 95% CI as the middle 95% of the bootstrap distribution:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_confidence_interval(\n  boot_means, \n  point_estimate = observed_mean, \n  level = 0.95,\n  type = \"percentile\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1  521923.  605514.\n```\n\n\n:::\n:::\n\n\n\n\n## Making a decision about the average price of houses in Duke Forest\n\n::: task\nAn article in the Durham Herald Sun states that the average price of a house in Duke Forest is \\$600,000.\nDo these data provide convincing evidence to refute this claim?\n:::\n\n## Setting the hypotheses\n\nDefine $\\mu$ as the true average price of all houses in Duke Forest\n\n$H_0: \\mu = 600000$ - The true average price of all houses in Duke Forest is \\$600,000 (as claimed by the Durham Herald Sun, i.e., there's nothing going on)\n\n$H_A: \\mu \\ne 600000$ - The true average price of all houses in Duke Forest is different than \\$600,000 (refuting the claim by the Durham Herald Sun, i.e., there is something going on)\n\n## Calculate the observed\n\nWell, we already did this!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobserved_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: price (numeric)\n# A tibble: 1 × 1\n     stat\n    <dbl>\n1 559899.\n```\n\n\n:::\n:::\n\n\n\n\n## Simulate the null distribution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5|6\"}\nset.seed(1121)\n\nnull_means <- duke_forest |>\n  specify(response = price) |>\n  hypothesize(null = \"point\", mu = 600000) |>\n  generate(reps = 100, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n\nnull_means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: price (numeric)\nNull Hypothesis: point\n# A tibble: 100 × 2\n   replicate    stat\n       <int>   <dbl>\n 1         1 631572.\n 2         2 586077.\n 3         3 628357.\n 4         4 609853.\n 5         5 606495.\n 6         6 623755.\n 7         7 573132.\n 8         8 615423.\n 9         9 599994.\n10        10 628927.\n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Visualize the null distribution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_means)\n```\n\n::: {.cell-output-display}\n![](23-inference-overview_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n\n## Calculate the p-value\n\nProbability of observed or more extreme outcome, given the null hypothesis is true:\n\n$$\n2 \\times P(\\bar{x} < 559899 ~ | ~ \\mu = 600000)\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_means |>\n  get_p_value(obs_stat = observed_mean, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1    0.02\n```\n\n\n:::\n:::\n\n\n\n\n## Visualize the p-value\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_means) +\n  shade_p_value(obs_stat = observed_mean, direction = \"two-sided\")\n```\n\n::: {.cell-output-display}\n![](23-inference-overview_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n\n# Application exercise\n\n## ae\\-19\\-equality\\-randomization {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-19\\-equality\\-randomization\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits.\n:::\n\n## Recap of AE {.smaller}\n\n-   A hypothesis test is a statistical technique used to evaluate competing claims (null and alternative hypotheses) using data.\n-   We simulate a null distribution using our original data.\n-   We use our sample statistic and direction of the alternative hypothesis to calculate the p-value.\n-   We use the p-value to determine conclusions about the alternative hypotheses.\n\n# \n",
    "supporting": [
      "23-inference-overview_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}