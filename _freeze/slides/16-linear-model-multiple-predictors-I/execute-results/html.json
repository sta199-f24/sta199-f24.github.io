{
  "hash": "a7c7cf7bc8ea0579bbbe9b0ef0bc54ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Linear regression with a multiple predictors I\"\nsubtitle: \"Lecture 16\"\ndate: \"2024-10-29\"\nformat: \n  live-revealjs: \n    output-file: 16-linear-model-multiple-predictors-I-slides.html\nwebr:\n  cell-options:\n    autorun: false\n  packages:\n    - tidyverse\n    - tidymodels\n    - palmerpenguins\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\n```\n:::\n\n\n\n\n\n\n<!-- end: webr fodder -->\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-14\\-modeling\\-penguins\\-multi\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n\n## Announcements\n\n-   Project repos closed (you won't see them on GitHub) until proposal grading is done. You'll get access back to them on Monday. In the meantime, if you want to work on your project, you can make local commits on RStudio and you'll be able to push them when you regain access.\n-   Peer evaluations (via TEAMMATES) are due by Friday, 5 pm.\n\n## Goals\n\n-   Recap modeling with a single predictor\n\n-   Fit and interpret models with a categorical predictor\n\n-   Fit and interpret models with multiple predictors\n\n-   Distinguish between additive and interaction models\n\n# Ugly plot awards\n\n## Honorable mention 1: Austin Liu {.scrollable}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmtcars |>\n  mutate(\n    am = case_when(\n      am == 0 ~ \"Automatic\",\n      am == 1 ~ \"Manual\"\n    ),\n    vs = case_when(\n      vs == 0 ~ \"V-shaped\",\n      vs == 1 ~ \"Straight\"\n    ),\n    am = fct_relevel(am, c(\"Manual\", \"Automatic\")),\n    vs = fct_relevel(vs)\n  ) |>\n  ggplot(aes(x = wt, y = mpg, color = am, shape = vs)) +\n  geom_point() +\n  labs(\n    title = \"ggplot2 \n    plot \n    of \n    car \n    weight \n    in \n    thousands \n    of pounds versus \n    fuel \n    efficiency in miles per \n    gallon from thirty-two \n    automobiles in\n    the nineteen-seventy-four \n    Motor Trend United \n    States magazine \n    issue\",\n    subtitle = \"of cars\",\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles / gallon\",\n    color = \"Transmission\",\n    shape = \"Engine configuration\"\n  ) +\n  theme(\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"green\"),\n    legend.background = element_rect(fill = \"yellow\"),\n    panel.background = element_rect(fill = \"red\"),\n    text = element_text(size = 1, family = \"AvantGarde\"),\n    aspect.ratio = 0.1,\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank()\n  ) +\n  scale_color_manual(\n    values = c(\"Manual\" = \"red1\", \"Automatic\" = \"red2\")\n  ) +\n  scale_shape_manual(\n    values = c(\"V-shaped\" = 19, \"Straight\" = 20)\n  )\n```\n\n::: {.cell-output-display}\n![](16-linear-model-multiple-predictors-I_files/figure-revealjs/ugly-plot-Austin-Liu-1.png){width=960}\n:::\n:::\n\n\n\n\n## Honorable mention 2: Clarke Campbell {.scrollable}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmtcars |>\n  mutate(trans_type = case_when(\n    am == 0 ~ \"Automatic\",\n    am == 1 ~ \"Manual\"\n    )\n  ) |>\n  mutate(engine_type = case_when(\n    am == 0 ~ \"V-shaped\",\n    am == 1 ~ \"Straight\"\n    )\n  ) |>\nggplot(aes(x = wt, y = mpg, color = trans_type, shape = engine_type)) +\n  geom_point(size = 0.1) +\n  labs(\n    x = \"Weight (in 1000s of lbs)\",\n    y = \"Miles / gallon\",\n    title = \"Weight vs. miles per gallon of 32 cars\",\n    subtitle = \"from the 1974 Motor Trend US magazine\",\n    color = \"Transmission Type:\",\n    shape = \"Engine Type\"\n  ) +\n  guides(\n    color = guide_legend(position = \"top\"),\n    shape = guide_legend(position = \"right\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"Manual\" = \"grey\",\n      \"Automatic\" = \"darkgrey\"\n    ),\n    breaks = c(\n      \"Manual\", \"Automatic\"\n      )\n  ) +\n  theme(\n    text = element_text(\n      size = 20, \n      family = \"URWBookman\", \n      face = \"italic\"),\n    panel.background = element_rect(colour = 'yellow'),\n    plot.background = element_rect(fill = \"#473417\"))\n```\n\n::: {.cell-output-display}\n![](16-linear-model-multiple-predictors-I_files/figure-revealjs/ugly-plot-Clarke-Campbell-1.png){width=960}\n:::\n:::\n\n\n\n\n## Honorable mention 3: Charlie Pausic {.scrollable}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(mtcars, \n       aes(x = wt, y = mpg, \n           color = factor(am), shape = factor(vs)\n           )\n       ) +\n  geom_point(size = 15, alpha = 0.1) + \n\n  labs(\n    title = \"carssssss\",\n    x = \"variable\",\n    y = \"other variable\",\n    color = \"Transmission\",\n    shape = \"Engine Type\"\n  )+\n  theme_void() +\n  theme(legend.title = element_text(size = 1),\n        plot.background = element_rect(fill = \"black\")\n        ) +\n  scale_color_manual(\n    values = c(\"blue\", \"blue\"),\n    labels = c(\"Automatic\", \"Manual\")\n  ) +\n  scale_shape_manual(\n    values = c(\"circle\", \"triangle\"),\n    labels = c(\"Straight\", \"V-shaped\")\n  )\n```\n\n::: {.cell-output-display}\n![](16-linear-model-multiple-predictors-I_files/figure-revealjs/ugly-plot-Charlie-Pausic-1.png){width=960}\n:::\n:::\n\n\n\n\n## Honorable mention 4: Natalie Veale {.scrollable}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmtcars |>\n  mutate(am = case_when(\n           am == \"0\" ~ \"automatic\",\n           am == \"1\" ~ \"manual\"),\n         am = factor(am, levels = c(\"manual\", \"automatic\")),\n         vs = case_when(\n           vs == \"0\" ~ \"v-shaped\",\n           vs == \"1\" ~ \"straight\")\n  ) |>\nggplot(aes(x = wt, y = mpg, color = am, shape = vs)) +\n  geom_point(size = 20) +\n  labs(\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles / gallon\",\n    title = \"MPG for Vehicles of Different Weights\",\n    color = \"Transmission\",\n    shape = \"Engine Type\"\n  ) +\n  scale_y_continuous(breaks = seq(0, 50, by = 1)) +\n  scale_color_manual(values = c(\n    \"automatic\" = \"darkgoldenrod\",\n    \"manual\" = \"burlywood2\"\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    plot.background = element_rect(fill = \"darkgoldenrod4\"),\n    legend.text = element_text(size = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](16-linear-model-multiple-predictors-I_files/figure-revealjs/ugly-plot-Natalie-Veale-1.png){width=672}\n:::\n:::\n\n\n\n\n## Winner: Neha Shukla {.scrollable}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggimage)\nmtcars_new <- mtcars |>\n  mutate(\n    am = if_else(am == 0, \"automatic\", \"manual\"),\n    am = fct_relevel(am, \"manual\", \"automatic\")\n  )\n\nggplot(\n  mtcars_new,\n  aes(x = wt, y = mpg)\n) +\n  labs(\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles / gallon\",\n    title = \"Car's Mileage per Gallon vs. Car Weight\",\n    subtitle = \"Colored by type of transmission\",\n    color = \"Transmission\",\n    shape = \"Engine\"\n  ) +\n  geom_image(\n    data = tibble(wt = 3.5, mpg = 25),\n    aes(image = \"images/16/rickroll.png\"),\n    size = 0.8\n  ) +\n  geom_image(\n    data = tibble(wt = 2, mpg = 15),\n    aes(image = \"images/16/dino.png\"),\n    size = 0.4\n  ) +\n  geom_image(\n    data = tibble(wt = 4, mpg = 25),\n    aes(image = \"images/16/sparkle.png\"),\n    size = 0.4\n  ) +\n  geom_point(\n    aes(shape = vs, alpha = wt, color = am),\n    size = 15\n  ) +\n  theme_dark() +\n  theme(\n    legend.position = \"right\",\n    legend.background = element_rect(fill = \"green\")\n  ) +\n  scale_color_manual(\n    values = c(\n      \"manual\" = \"#b9bbda\",\n      \"automatic\" = \"#6d3617\"\n    )\n  ) +\n  guides(\n    shape = guide_legend(override.aes = list(size = 0.2)),\n    color = guide_legend(override.aes = list(size = 0.2)),\n    alpha = guide_legend(override.aes = list(size = 0.2))\n  )\n```\n:::\n\n\n\n\n![](images/16/ugly-plot-neha-shukla.png)\n\n# Linear regression with a categorical predictor\n\n## From last time (with `penguins`)\n\n::: question\nA different researcher wants to look at body weight of penguins based on the island they were recorded on.\nHow are the variables involved in this analysis different?\n:::\n\n. . .\n\n-   outcome: body weight (numerical)\n\n-   predictor: island (categorical)\n\n## Visualize body weight vs. island {.smaller}\n\n::: question\nDetermine whether each of the following plot types would be an appropriate choice for visualizing the relationship between body weight and island of penguins.\n:::\n\n-   Scatterplot [❌]{.fragment}\n\n-   Box plot [✅]{.fragment}\n\n-   Violin plot [✅]{.fragment}\n\n-   Density plot [✅]{.fragment}\n\n-   Bar plot [❌]{.fragment}\n\n-   Stacked bar plot [❌]{.fragment}\n\n## Visualize {.smaller}\n\n::: task\nVisualize the relationship between body weight and island of penguins.\nAlso calculate the average body weight per island.\n:::\n\n\n\n\n::: {.cell}\n```{webr}\n# add code here\n```\n:::\n\n\n\n\n## Model - fit {.smaller}\n\n::: task\nFit a linear regression model predicting body weight from island and display the results.\nWhy is Biscoe not on the output?\n:::\n\n\n\n\n::: {.cell}\n```{webr}\n# add code here\n```\n:::\n\n\n\n\n## Model - interpret {.smaller}\n\n$$\n\\widehat{body~mass} = 4716 - 1003 \\times islandDream - 1010 \\times islandTorgersen\n$$\n\n-   Intercept: [Penguins from Biscoe island are expected to weigh, on average, 4,716 grams.]{.fragment}\n\n-   Slope - islandDream: [Penguins from Dream island are expected to weigh, on average, 1,003 grams less than those from Biscoe island.]{.fragment}\n\n-   Slope - islandTorgersen: [Penguins from Torgersen island are expected to weigh, on average, 1,010 grams less than those from Biscoe island.]{.fragment}\n\n## Model - predict {.smaller}\n\n::: task\nWhat is the predicted body weight of a penguin on Biscoe island?\nWhat are the estimated body weights of penguins on Dream and Torgersen islands?\nWhere have we seen these values before?\n:::\n\n\n\n\n::: {.cell}\n```{webr}\n# add code here\n```\n:::\n\n\n\n\n## Model - predict {.smaller}\n\n::: task\nCalculate the predicted body weights of penguins on Biscoe, Dream, and Torgersen islands *by hand*.\n:::\n\n$$\n\\widehat{body~mass} = 4716 - 1003 \\times islandDream - 1010 \\times islandTorgersen\n$$\n\n. . .\n\n-   Biscoe: $\\widehat{body~mass} = 4716 - 1003 \\times 0 - 1010 \\times 0 = 4716$\n\n. . .\n\n-   Dream: $\\widehat{body~mass} = 4716 - 1003 \\times 1 - 1010 \\times 0 = 3713$\n\n. . .\n\n-   Torgersen: $\\widehat{body~mass} = 4716 - 1003 \\times 0 - 1010 \\times 1 = 3706$\n\n## Models with categorical predictors\n\n::: incremental\n-   When the categorical predictor has many levels, they're encoded to **dummy variables**.\n\n-   The first level of the categorical variable is the baseline level.\n    In a model with one categorical predictor, the intercept is the predicted value of the outcome for the baseline level (x = 0).\n\n-   Each slope coefficient describes the difference between the predicted value of the outcome for that level of the categorical variable compared to the baseline level.\n:::\n",
    "supporting": [
      "16-linear-model-multiple-predictors-I_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}