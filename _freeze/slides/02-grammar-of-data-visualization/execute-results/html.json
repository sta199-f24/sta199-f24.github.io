{
  "hash": "ae9c11f66d2a64046601ea4065d09d8a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data visualization\"\nsubtitle: \"Lecture 2\"\ndate: \"2024-09-03\"\nformat: \n  live-revealjs: \n    output-file: 02-grammar-of-data-visualization-slides.html\nwebr:\n  cell-options:\n    autorun: false\n  packages:\n    - unvotes\n    - tidyverse\n    - ggthemes\n---\n\n\n\n\n<!-- begin: webr fodder -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| echo: false\n#| output: false\noptions(width = 60)\n\nus_uk_tr_votes <- un_votes |>\n  inner_join(un_roll_calls, by = \"rcid\") |>\n  inner_join(un_roll_call_issues, by = \"rcid\", relationship = \"many-to-many\") |>\n  filter(country %in% c(\"United Kingdom\", \"United States\", \"Turkey\")) |>\n  mutate(year = year(date)) |>\n  group_by(country, year, issue) |>\n  summarize(percent_yes = mean(vote == \"yes\"), .groups = \"drop\")\n```\n:::\n\n\n\n\n<!-- end: webr fodder -->\n\n# Warm-up\n\n## Announcements {.smaller}\n\n-   Office hours are posted on the course website!\n\n-   If you can follow along with today's application exercise steps, great!\n    If something doesn't work as expected, ask me/TA during the exercise.\n    We'll either:\n    - help you on the spot and get you unstuck or\n    - identify that you're missing an earlier step, ask you to follow along with your neighbor, and visit office hours before Thursday for one-on-one help\n\n## Outline {.smaller}\n\n-   Last time:\n\n    -   We introduced you to the course toolkit.\n\n    -   You **cloned** your `ae` repositories and started making some updates in your Quarto documents.\n\n    -   You did not **commit and push** your changes back.\n\n. . .\n\n-   Today:\n\n    -   You will **commit** your changes from last time and **push** them to wrap up that application exercise.\n\n    -   We will introduce data visualization.\n\n    -   You will **pull** to get today's application exercise file.\n\n    -   You will work on the new application exercise on data visualization, **commit** your changes, and **push** them.\n\n# From last time\n\n## `ae-01-meet-the-penguins`\n\n::: appex\nGo to RStudio, confirm that you're in the `ae` project, and open the document `ae-01-meet-the-penguins.qmd`.\n:::\n\n## Tour recap: Quarto\n\n![](images/01/tour-quarto.png){fig-alt=\"RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk.\" fig-align=\"center\"}\n\n## Tour recap: Git + GitHub {.smaller}\n\nOnce we made changes to our Quarto document, we\n\n-   went to the Git pane in RStudio\n\n-   staged our changes by clicking the checkboxes next to the relevant files\n\n-   committed our changes with an informative commit message\n\n-   pushed our changes to our application exercise repos\n\n    - if this failed, we pulled first to get the new application exercise files, and then pushed\n\n-   confirmed on GitHub that we could see our changes pushed from RStudio\n\n## How will we use Quarto?\n\n-   Every application exercise, lab, project, etc. is an Quarto document\n-   You'll always have a template Quarto document to start with\n-   The amount of scaffolding in the template will decrease over the semester\n\n## What's with all the hexes?\n\n![](images/01/hexes.jpeg){fig-alt=\"Hex logos for many packages\" fig-align=\"center\"}\n\n## We have hexes too!\n\n::: task\nGrab one before you leave!\n:::\n\n::: center-align\n![](images/logo.png){fig-alt=\"STA 199 hex logo\"}\n:::\n\n# Data visualization\n\n## UN Votes {.smaller}\n\n::: question\nRemember this visualization from the first day of class?\n:::\n\n![](images/02/un-data-viz.png)\n\n## Let' see... {.center}\n\n::: {.hand .large}\nhow the sausage is made!\n:::\n\n## Load packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(unvotes)\nlibrary(tidyverse)\nlibrary(ggthemes)\n```\n:::\n\n\n\n\n## Prepare the data {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_uk_tr_votes <- un_votes |>\n  inner_join(un_roll_calls, by = \"rcid\") |>\n  inner_join(un_roll_call_issues, by = \"rcid\", relationship = \"many-to-many\") |>\n  filter(country %in% c(\"United Kingdom\", \"United States\", \"Turkey\")) |>\n  mutate(year = year(date)) |>\n  group_by(country, year, issue) |>\n  summarize(percent_yes = mean(vote == \"yes\"), .groups = \"drop\")\n```\n:::\n\n\n\n\n. . .\n\n::: callout-note\nLet's leave these details aside for a bit, we'll revisit this code at a later point in the semester.\nFor now, let's agree that we need to do some \"data wrangling\" to get the data into the right format for the plot we want to create.\nJust note that we called the data frame we'll visualize `us_uk_tr_votes`.\n:::\n\n## Visualize the data\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  us_uk_tr_votes, \n  mapping = aes(x = year, y = percent_yes, color = country)\n  ) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  labs(\n    x = \"Year\", \n    y = \"% yes\", \n    color = \"Country\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-grammar-of-data-visualization_files/figure-revealjs/un-data-viz-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n\n\n## Step 1. Prepare a canvas for plotting\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(data = us_uk_tr_votes)\n```\n:::\n\n\n\n\n## Step 2. Map variables to aesthetics {.smaller}\n\n*Map* `year` to the `x` *aesthetic* \n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(data = us_uk_tr_votes, mapping = aes(x = year))\n```\n:::\n\n\n\n\n## Step 3. Map variables to aesthetics {.smaller}\n\n*Map* `percent_yes` to the `y` *aesthetic* \n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))\n```\n:::\n\n\n\n\n## Mapping and aesthetics {.smaller}\n\n- **Aesthetics** are visual properties of a plot\n\n- In the *grammar of graphics*, variables from the data frame are **map**ped to aesthetics\n\n![](images/02/aesthetic-mapping.gif){fig-align=\"center\"}\n\n## Argument names {.smaller}\n\nIt's common practice in R to omit the names of first two arguments of a function:\n\n. . .\n\n- Instead of\n\n```r\nggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))\n```\n\n- Use\n\n```r\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes))\n```\n\n\n## Step 4. Represent data on your canvas {.smaller}\n\nwith a `geom`\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(us_uk_tr_votes, mapping = aes(x = year, y = percent_yes)) +\n  geom_point()\n```\n:::\n\n\n\n\n## Step 5. Map variables to aesthetics {.smaller}\n\n*Map* `country` to the `color` *aesthetic* \n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point()\n```\n:::\n\n\n\n\n## Step 6. Represent data on your canvas {.smaller}\n\nwith another `geom`\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth()\n```\n:::\n\n\n\n\n## Warnings and messages\n\n- Adding `geom_smooth()` resulted in the following warning:\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n. . .\n\n- It tells us the type of smoothing ggplot2 does under the hood when drawing the smooth curves that represent trends for each country.\n\n. . .\n\n- Going forward we'll suppress this warning to save some space.\n\n## Step 7. Split plot into facets {.smaller}\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue)\n```\n:::\n\n\n\n\n## Step 8. Use a different color scale\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind()\n```\n:::\n\n\n\n\n## Step 10. Apply a different theme\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal()\n```\n:::\n\n\n\n\n## Step 11. Add labels\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n:::\n\n\n\n\n## Step 12. Set transparency of points\n\nwith `alpha`\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n:::\n\n\n\n\n## Step 13. Hide standard errors of curves\n\nwith `se = FALSE`\n\n\n\n\n::: {.cell}\n```{webr}\n#| fig-width: 9\n#| fig-height: 3\n#| warning: false\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n:::\n\n\n\n\n## Grammar of graphics {.smaller}\n\n::: {.columns}\n::: {.column width=\"50%\"}\nWe built a plot layer-by-layer\n\n- just like described in the book *The Grammar of Graphics* and \n- implemented in the **ggplot2** package, the data visualization package of the tidyverse.\n:::\n::: {.column width=\"20%\"}\n![](images/02/gg-book.png)\n:::\n::: {.column width=\"30%\"}\n![](images/02/gg-layers.png)\n:::\n:::\n\n# Application exercise\n\n## `ae-02-bechdel-dataviz` {.smaller}\n\n::: appex\n-   Go to your `ae` project in RStudio.\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n-   If you haven't yet done so, click **Pull** to get today's application exercise file.\n-   Work through the application exercise in class, and **render, commit, and push** your edits by the end of class.\n:::\n\n## Recap {.smaller}\n\n-   Construct plots with `ggplot()`.\n-   Layers of ggplots are separated by `+`s.\n-   The formula is (almost) always as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +\n  geom_XXX()\n```\n:::\n",
    "supporting": [
      "02-grammar-of-data-visualization_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}