{
  "hash": "be6b56b11201e02b692a97c5f0ab8cb9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 01: Meet the penguins\"\n---\n\n\n\nFor this application exercise, we'll use the **tidyverse** and **palmerpenguins** packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n\nThe dataset we will visualize is called `penguins`.\nLet's `glimpse()` at it.\n\n-   **Your turn:** Replace `#add code here` with the code for \"glimpse\"ing at the data `penguins` data frame – `glimpse(penguins)`. Render the document and view the output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n\n-   **Demo:** First, replace the blank below with the number of rows in the `penguins` data frame based on the output of the chunk below. Then, replace it with \"inline code\" and render again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n:::\n\n\n\nThere are \\_\\_\\_ penguins in the `penguins` data frame.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}