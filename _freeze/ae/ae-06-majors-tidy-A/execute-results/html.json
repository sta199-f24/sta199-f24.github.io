{
  "hash": "c3ef8282eac84052307ae7b6073f8d78",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 06: StatSci majors + data tidying\"\nsubtitle: \"Suggested answers\"\ncategories: \n  - Answers\n---\n\n\n\n\n\n## Getting started\n\n### Packages\n\nWe'll use the **tidyverse** package for this analysis.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\n### Data\n\nThe data are available in the `data` folder.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci <- read_csv(\"data/statsci.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 4 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): degree\ndbl (14): 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd let's take a look at the data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 15\n  degree   `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018` `2019` `2020`\n  <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Statist…     NA      1     NA     NA      4      4      1     NA     NA      1\n2 Statist…      2      2      4      1      3      6      3      4      4      1\n3 Statist…      2      6      1     NA      5      6      6      8      8     17\n4 Statist…      5      9      4     13     10     17     24     21     26     27\n# ℹ 4 more variables: `2021` <dbl>, `2022` <dbl>, `2023` <dbl>, `2024` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Pivoting\n\nPivot the `statsci` data frame *longer* such that\n\n-   each row represents a degree type / year combination,\n-   `year` and `n`umber of graduates for that year are columns,\n-   `year` is numerical,\n-   `NA`s in counts are replaced with 0s,\n-   `degree_type` has levels BS, BS2, AB, and AB2 (in this order), and\n-   the resulting data frame is saved as `statsci_longer`.\n\nReview the code below with your neighbor and come up with at least one question about the code.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer <- statsci |>\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |>\n  mutate(n = if_else(is.na(n), 0, n)) |>\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |>\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n  )\n\nstatsci_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 4\n   major               degree_type  year     n\n   <chr>               <fct>       <dbl> <dbl>\n 1 Statistical Science AB2          2011     0\n 2 Statistical Science AB2          2012     1\n 3 Statistical Science AB2          2013     0\n 4 Statistical Science AB2          2014     0\n 5 Statistical Science AB2          2015     4\n 6 Statistical Science AB2          2016     4\n 7 Statistical Science AB2          2017     1\n 8 Statistical Science AB2          2018     0\n 9 Statistical Science AB2          2019     0\n10 Statistical Science AB2          2020     1\n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Plotting\n\n### Step 1: Basics\n\nLet's start with a basic plot, nothing too fancy!\nCreate a line plot of number of majors vs. year, where lines are colored by degree type, and the data are also represented as points on the lines.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci_longer, aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ae-06-majors-tidy-A_files/figure-html/plot-step-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWhat aspects of the plot need to be updated to go from the draft you created above to the goal plot from the slides.\n\n-   x-axis scale: need to go from 2012 to 2024 in increments of 2 years\n-   line colors\n-   axis labels: title, subtitle, x, y, caption\n-   theme\n-   legend position and border\n\n### Step 2: Scales\n\nUpdate x-axis scale such that the years displayed go from 2012 to 2024 in increments of 2 years.\nDo this by adding on to your ggplot call from earlier.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci_longer, aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2012, 2024, 2))\n```\n\n::: {.cell-output-display}\n![](ae-06-majors-tidy-A_files/figure-html/plot-step-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Step 3: Colors\n\nUpdate line colors using the following level / color assignments.\nOnce again, do this by adding on to your ggplot call from earlier.\n\n-   \"BS\" = \"cadetblue4\"\n-   \"BS2\" = \"cadetblue3\"\n-   \"AB\" = \"lightgoldenrod4\"\n-   \"AB2\" = \"lightgoldenrod3\"\n\nNote: A handy reference for named colors in R is <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf>, though you can use [HEX color codes](https://www.w3schools.com/colors/colors_picker.asp) as well.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci_longer, aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2012, 2024, 2)) +\n  scale_color_manual(\n    values = c(\n      \"BS\" = \"cadetblue4\",\n      \"BS2\" = \"cadetblue3\",\n      \"AB\" = \"lightgoldenrod4\",\n      \"AB2\" = \"lightgoldenrod3\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](ae-06-majors-tidy-A_files/figure-html/plot-step-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Step 4: Labels and themes\n\nUpdate the plot labels (`title`, `subtitle`, `x`, `y`, and `caption`) and use `theme_minimal()`.\nOnce again, do this by adding on to your ggplot call from earlier.\nNote: The link in the caption is <https://registrar.duke.edu/registration/enrollment-statistics>.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci_longer, aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2012, 2024, 2)) +\n  scale_color_manual(\n    values = c(\n      \"BS\" = \"cadetblue4\",\n      \"BS2\" = \"cadetblue3\",\n      \"AB\" = \"lightgoldenrod4\",\n      \"AB2\" = \"lightgoldenrod3\"\n    )\n  ) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Number of majors graduating\",\n    color = \"Degree type\",\n    title = \"Statistical Science majors over the years\",\n    subtitle = \"Academic years 2011 - 2024\",\n    caption = \"Source: Office of the University Registrar\\nhttps://registrar.duke.edu/registration/enrollment-statistics\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ae-06-majors-tidy-A_files/figure-html/plot-step-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Step 5: Legends and figure sizing via cell options\n\nFinally, adding to your pipeline you've developed so far, move the legend into the plot, make its background white, and its border gray.\nAdditionally, in the cell options, set\n\n-   `out-width: 100%` -- Output should span 100% of the width\n-   `fig-width: 8` -- Figure output should have a width of 8 inches\n-   `fig-asp: 0.5` -- Figure output should have an aspect ratio of 0.5, resulting in a height of 8 \\* 0.5 = 4 inches\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci_longer, aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2012, 2024, 2)) +\n  scale_color_manual(\n    values = c(\n      \"BS\" = \"cadetblue4\",\n      \"BS2\" = \"cadetblue3\",\n      \"AB\" = \"lightgoldenrod4\",\n      \"AB2\" = \"lightgoldenrod3\"\n    )\n  ) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Number of majors graduating\",\n    color = \"Degree type\",\n    title = \"Statistical Science majors over the years\",\n    subtitle = \"Academic years 2011 - 2024\",\n    caption = \"Source: Office of the University Registrar\\nhttps://registrar.duke.edu/registration/enrollment-statistics\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.1, 0.7),\n    legend.background = element_rect(fill = \"white\", color = \"gray\")\n  )\n```\n\n::: {.cell-output-display}\n![](ae-06-majors-tidy-A_files/figure-html/plot-step-5-1.png){width=100%}\n:::\n:::\n\n\n\n\n\n## Render, commit, and push\n\n1.  Render your Quarto document.\n\n2.  Go to the Git pane and check the box next to each file listed, i.e., stage your changes.\n    Commit your staged changes using a simple and informative message.\n\n3.  Click on push (the green arrow) to push your changes to your application exercise repo on GitHub.\n\n4.  Go to your repo on GitHub and confirm that you can see the updated files.\n    Once your updated files are in your repo on GitHub, you're good to go!\n",
    "supporting": [
      "ae-06-majors-tidy-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}