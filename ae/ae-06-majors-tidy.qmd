---
title: "AE 06: StatSci majors + data tidying"
---

## Getting started

### Packages

We'll use the **tidyverse** package for this analysis.

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
```

### Data

The data are available in the `data` folder.

```{r}
#| label: load-data
statsci <- read_csv("data/statsci.csv")
```

And let's take a look at the data.

```{r}
statsci
```

## Pivoting

Pivot the `statsci` data frame *longer* such that

-   each row represents a degree type / year combination,
-   `year` and `n`umber of graduates for that year are columns,
-   `year` is numerical,
-   `NA`s in counts are replaced with 0s,
-   `degree_type` has levels BS, BS2, AB, and AB2 (in this order), and
-   the resulting data frame is saved as `statsci_longer`.

Review the code below with your neighbor and come up with at least one question about the code.

```{r}
#| label: pivot
statsci_longer <- statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  )

statsci_longer
```

## Plotting

### Step 1: Basics

Let's start with a basic plot, nothing too fancy!
Create a line plot of number of majors vs. year, where lines are colored by degree type, and the data are also represented as points on the lines.

```{r}
#| label: plot-step-1
# add code here
```

What aspects of the plot need to be updated to go from the draft you created above to the goal plot from the slides.

Add response here.

### Step 2: Scales

Update x-axis scale such that the years displayed go from 2012 to 2024 in increments of 2 years.
Do this by adding on to your ggplot call from earlier.

```{r}
#| label: plot-step-2
# add code here
```

### Step 3: Colors

Update line colors using the following level / color assignments.
Once again, do this by adding on to your ggplot call from earlier.

-   "BS" = "cadetblue4"
-   "BS2" = "cadetblue3"
-   "AB" = "lightgoldenrod4"
-   "AB2" = "lightgoldenrod3"

Note: A handy reference for named colors in R is <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf>, though you can use [HEX color codes](https://www.w3schools.com/colors/colors_picker.asp) as well.

```{r}
#| label: plot-step-3
# add code here
```

### Step 4: Labels and themes

Update the plot labels (`title`, `subtitle`, `x`, `y`, and `caption`) and use `theme_minimal()`.
Once again, do this by adding on to your ggplot call from earlier.
Note: The link in the caption is <https://registrar.duke.edu/registration/enrollment-statistics>.

```{r}
#| label: plot-step-4
# add code here
```

### Step 5: Legends and figure sizing via cell options

Finally, adding to your pipeline you've developed so far, move the legend into the plot, make its background white, and its border gray.
Additionally, in the cell options, set

-   `out-width: 100%` -- Output should span 100% of the width
-   `fig-width: 8` -- Figure output should have a width of 8 inches
-   `fig-asp: 0.5` -- Figure output should have an aspect ratio of 0.5, resulting in a height of 8 \* 0.5 = 4 inches

```{r}
#| label: plot-step-5
# add code here
```

## Render, commit, and push

1.  Render your Quarto document.

2.  Go to the Git pane and check the box next to each file listed, i.e., stage your changes.
    Commit your staged changes using a simple and informative message.

3.  Click on push (the green arrow) to push your changes to your application exercise repo on GitHub.

4.  Go to your repo on GitHub and confirm that you can see the updated files.
    Once your updated files are in your repo on GitHub, you're good to go!
