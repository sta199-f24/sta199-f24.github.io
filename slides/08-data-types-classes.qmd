---
title: "Data types and classes"
subtitle: "Lecture 8"
date: "2024-09-24"
format: 
  live-revealjs: 
    output-file: 08-data-types-classes-slides.html
    webr:
      cell-options:
        autorun: false
webr:
  packages:
    - tidyverse
  resources:
    - https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/refs/heads/main/slides/data/survey-2024-09-24.csv
editor_options: 
  chunk_output_type: console
---

<!-- begin: webr fodder -->

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

```{webr}
#| edit: false
#| echo: false
#| output: false
options(width = 60)
survey <- read_csv("survey-2024-09-24.csv") |>
  rename(
    tue_classes = `How many classes do you have on Tuesdays?`,
    year = `What year are you?`
  )
```

<!-- end: webr fodder -->

<!--# hello -->

<!-- begin: ae definition -->

```{r}
#| include: false
todays_ae <- "ae-08-durham-climate-factors"
```

<!-- end: ae definition -->

# Warm-up

## While you wait... {.smaller}

:::::: columns
::: {.column width="35%"}
{{< qrcode https://forms.gle/J9Giy9sytk4KxVFo8 >}}

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSc9frzLIsVXJdrKrWxetCXtffs8C2sGv-UNFD3egfRNUtA3Pw/viewform?embedded=true" width="350" height="400" frameborder="0" marginheight="0" marginwidth="0">Loadingâ€¦</iframe>
:::

:::: {.column width="65%"}
Prepare for today's application exercise: **`{r} todays_ae`**

::: appex
-   Go to your `ae` project in RStudio.

-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   Click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Wait till the you're prompted to work on the application exercise during class before editing the file.
:::
::::
::::::

## Lab 1 feedback {.smaller}

::: incremental
-   Describing a distribution:
    -   shape (modality and skewness)
    -   center (with calculated value or estimated value or range)
    -   spread (with calculated value or estimated value or range)
    -   unusual observations (and, where possible, explanation for why they're unusual)
-   Describing a relationship:
    -   direction (positive or negative)
    -   form (linear or non-linear)
    -   strength
    -   unusual observations (and, where possible, explanation for why they're unusual)
:::

## Lab 1 commits

![](images/08/lab-1-commits.png)

## Regrade request policy {.smaller}

<https://sta199-f24.github.io/course-syllabus.html#regrade-requests>

::: incremental
-   Considered for errors in grade calculation or if a correct answer was mistakenly marked as incorrect

-   Not a mechanism for:

    -   disputing the number of points deducted for an incorrect response
    -   asking for clarification on feedback (come to office hours instead)

-   Due on Gradescope within a week after an assignment is returned

-   The entire assignment may be regraded, which could result in an adjustment in either direction

-   No regrade requests after the final exam has been administered
:::

# Data types

## How many classes do you have on Tuesdays?

```{r}
#| include: false
library(tidyverse)
survey <- read_csv("data/survey-2024-09-24.csv")
```

```{r}
survey
```

## `rename()` variables

To make them easier to work with...

```{r}
survey <- survey |>
  rename(
    tue_classes = `How many classes do you have on Tuesdays?`,
    year = `What year are you?`
  )
```

## Variable types

::: question
What type of variable is `tue_classes`?
:::

```{r}
survey
```

## Let's (attempt to) clean it up... {.scrollable}

```{webr}
survey |>
  ___
```

# Data types

## Data types in R

-   **logical**
-   **double**
-   **integer**
-   **character**
-   and some more, but we won't be focusing on those

## Logical & character

::::: columns
::: column
**logical** - Boolean values `TRUE` and `FALSE`

<br>

```{r}
typeof(TRUE)
```
:::

::: {.column .fragment}
**character** - character strings

<br> <br>

```{r}
typeof("First-year")
```
:::
:::::

## Double & integer

::::: columns
::: column
**double** - floating point numerical values (default numerical type)

<br>

```{r}
typeof(2.5)
typeof(3)
```
:::

::: {.column .fragment}
**integer** - integer numerical values (indicated with an `L`)

<br>

```{r}
typeof(3L)
typeof(1:3)
```
:::
:::::

## Concatenation {.smaller}

Vectors can be constructed using the `c()` function.

-   Numeric vector:

```{r}
c(1, 2, 3)
```

. . .

-   Character vector:

```{r}
c("Hello", "World!")
```

. . .

-   Vector made of vectors:

```{r}
c(c("hi", "hello"), c("bye", "jello"))
```

## Converting between types

::: hand
with intention...
:::

::::: columns
::: column
```{r}
x <- 1:3
x
typeof(x)
```
:::

::: {.column .fragment}
```{r}
y <- as.character(x)
y
typeof(y)
```
:::
:::::

## Converting between types

::: hand
with intention...
:::

::::: columns
::: column
```{r}
x <- c(TRUE, FALSE)
x
typeof(x)
```
:::

::: {.column .fragment}
```{r}
y <- as.numeric(x)
y
typeof(y)
```
:::
:::::

## Converting between types

::: hand
without intention...
:::

```{r}
c(2, "Just this one!")
```

. . .

R will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!

## Converting between types

::: hand
without intention...
:::

```{r}
c(FALSE, 3L)
```

. . .

```{r}
c(1.2, 3L)
```

. . .

```{r}
c(2L, "two")
```

## Explicit vs. implicit coercion

::::: columns
::: column
**Explicit coercion:**

When you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`.
:::

::: {.column .fragment}
**Implicit coercion:**

Happens when you use a vector in a specific context that expects a certain type of vector.
:::
:::::

# Data classes

## Data classes {.smaller}

::: incremental
-   Vectors are like Lego building blocks
-   We stick them together to build more complicated constructs, e.g. *representations of data*
-   The **class** attribute relates to the S3 class of an object which determines its behaviour
    -   You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious
-   Examples: factors, dates, and data frames
:::

## Factors {.smaller}

R uses factors to handle categorical variables, variables that have a fixed and known set of possible values

```{r}
class_years <- factor(
  c(
    "First-year", "Sophomore", "Sophomore", "Senior", "Junior"
    )
  )
class_years
```

::::: columns
::: {.column .fragment}
```{r}
typeof(class_years)
```
:::

::: {.column .fragment}
```{r}
class(class_years)
```
:::
:::::

## More on factors

We can think of factors like character (level labels) and an integer (level numbers) glued together

```{r}
glimpse(class_years)
```

```{r}
as.integer(class_years)
```

## Dates

```{r}
today <- as.Date("2024-09-24")
today
```

```{r}
typeof(today)
```

```{r}
class(today)
```

## More on dates

We can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together

```{r}
as.integer(today)
```

```{r}
as.integer(today) / 365 # roughly 55 yrs
```

## Data frames

We can think of data frames like like vectors of equal length glued together

```{r}
df <- data.frame(x = 1:2, y = 3:4)
df
```

::::: columns
::: column
```{r}
typeof(df)
```
:::

::: column
```{r}
class(df)
```
:::
:::::

## Lists {.smaller}

Lists are a generic vector container; vectors of any type can go in them

```{r}
#| code-line-numbers: "|2|3|4"
l <- list(
  x = 1:4,
  y = c("hi", "hello", "jello"),
  z = c(TRUE, FALSE)
)
l
```

## Lists and data frames {.smaller}

-   A data frame is a special list containing vectors of equal length

```{r}
df
```

-   When we use the `pull()` function, we extract a vector from the data frame

```{r}
df |>
  pull(y)
```

# Working with factors

## Read data in as character strings

```{r}
#| message: false
survey
```

## But coerce when plotting

```{r}
#| out-width: 100%
#| fig-width: 7
#| fig-asp: 0.5
ggplot(survey, mapping = aes(x = year)) +
  geom_bar()
```

## Use forcats to reorder levels {.scrollable}

```{webr}
#| out-width: 100%
#| fig-width: 7
#| fig-asp: 0.5
survey |>
  ___
```

## A peek into forcats {.smaller}

Reordering levels by:

-   `fct_relevel()`: hand

-   `fct_infreq()`: frequency

-   `fct_reorder()`: sorting along another variable

-   `fct_rev()`: reversing

...

. . .

Changing level values by:

-   `fct_lump()`: lumping uncommon levels together into "other"

-   `fct_other()`: manually replacing some levels with "other"

...
