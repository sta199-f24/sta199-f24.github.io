---
title: "Joining data"
subtitle: "Lecture 7"
date: "2024-09-19"
format: 
  live-revealjs: 
    output-file: 07-joining-data-slides.html
    webr:
      cell-options:
        autorun: false
webr:
  packages:
    - tidyverse
  resources:
    - https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/sales-taxes.csv
    - https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/us-regions.csv
editor_options: 
  chunk_output_type: console
---

<!-- begin: webr fodder -->

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

```{webr}
#| edit: false
#| echo: false
#| output: false
options(width = 60)
sales_taxes <- read_csv("https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/sales-taxes.csv")
us_regions <- read_csv("https://raw.githubusercontent.com/sta199-f24/sta199-f24.github.io/main/slides/data/us-regions.csv")
```

<!-- end: webr fodder -->

<!-- begin: ae definition -->

```{r}
#| include: false
todays_ae <- "ae-07-taxes-join"
```

<!-- end: ae definition -->

# Warm-up

## While you wait... {.smaller}

Prepare for today's application exercise: **`{r} todays_ae`**

::: appex
-   Go to your `ae` project in RStudio.

-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   Click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Wait till the you're prompted to work on the application exercise during class before editing the file.
:::

## Announcements

## Notes from Lab 1 submissions {.smaller}

**Use of AI tools:**

-   If using an AI tool **for code**, [**CITE!**]{style="color:#009E73;"}

> The bare minimum citation must include the AI tool youâ€™re using (e.g., ChatGPT) and your prompt.
> The prompt you use cannot be copied and pasted directly from the assignment; you must create a prompt yourself.

If we suspect code was generated with by / with the help of an AI tool but not cited, it's an automatic 0 on that question + potentially further penalties as outlined in <https://sta199-f24.github.io/course-syllabus.html#academic-honesty>.

. . .

-   If using an AI tool **for narrative**, [**STOP!**]{style="color:#D55E00;"}

## Notes from Lab 1 submissions {.smaller}

-   **Plot labeling:** Keep it concise and non-redundant (same info doesn't need to be repeated, in detail, in axis labels and title).

-   **Code style and readability:**

    -   Looking good overall!
    -   A tool that can help (but won't get everything right):
        -   Highlight code you want to style

        -   Click on Addins (top of editor), scroll down to STYLER, select Style selection

-   **Narrative:** Avoid lengthy or conflicting prose

## Recap: StatSci majors {.smaller}

```{r}
#| label: statsci-longer
#| include: false
library(tidyverse)
statsci <- read_csv("data/statsci.csv")

statsci_longer <- statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  )
```

```{r}
#| label: statsci-plot-1
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618
ggplot(
  statsci_longer, 
  aes(
    x = year, y = n, color = degree_type
    )
  ) +
  geom_point() +
  geom_line()
```

## Recap: Scales {.smaller}

::: task
Update x-axis scale: 2012 to 2024, increments of 2 years.
:::

```{r}
#| label: statsci-plot-2
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618
#| code-line-numbers: "|9"
ggplot(
  statsci_longer, 
  aes(
    x = year, y = n, color = degree_type
    )
  ) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2012, 2024, 2))
```

## Recap: Colors {.smaller}

::: task
Use custom colors.
:::

```{r}
#| label: statsci-plot-3
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618
#| code-line-numbers: "|10-17"
ggplot(
  statsci_longer, 
  aes(
    x = year, y = n, color = degree_type
    )
  ) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2012, 2024, 2)) +
  scale_color_manual(
    values = c(
      "BS" = "cadetblue4",
      "BS2" = "cadetblue3",
      "AB" = "lightgoldenrod4",
      "AB2" = "lightgoldenrod3"
    )
  )
```

## Recap: Labels and themes {.smaller}

::: task
Add custom labels and change theme.
:::

```{r}
#| label: statsci-plot-4
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618
#| code-line-numbers: "|18-25|26"
ggplot(
  statsci_longer, 
  aes(
    x = year, y = n, color = degree_type
    )
  ) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2012, 2024, 2)) +
  scale_color_manual(
    values = c(
      "BS" = "cadetblue4",
      "BS2" = "cadetblue3",
      "AB" = "lightgoldenrod4",
      "AB2" = "lightgoldenrod3"
    )
  ) +
  labs(
    x = "Graduation year",
    y = "Number of majors graduating",
    color = "Degree type",
    title = "Statistical Science majors over the years",
    subtitle = "Academic years 2011 - 2024",
    caption = "Source: Office of the University Registrar\nhttps://registrar.duke.edu/registration/enrollment-statistics"
  ) +
  theme_minimal()
```

## Recap: Legends {.smaller}

```{r}
#| label: statsci-plot-5
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618
#| code-line-numbers: "|27-31"
ggplot(
  statsci_longer, 
  aes(
    x = year, y = n, color = degree_type
    )
  ) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = seq(2012, 2024, 2)) +
  scale_color_manual(
    values = c(
      "BS" = "cadetblue4",
      "BS2" = "cadetblue3",
      "AB" = "lightgoldenrod4",
      "AB2" = "lightgoldenrod3"
    )
  ) +
  labs(
    x = "Graduation year",
    y = "Number of majors graduating",
    color = "Degree type",
    title = "Statistical Science majors over the years",
    subtitle = "Academic years 2011 - 2024",
    caption = "Source: Office of the University Registrar\nhttps://registrar.duke.edu/registration/enrollment-statistics"
  ) +
  theme_minimal() +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.1, 0.7),
    legend.background = element_rect(fill = "white", color = "gray")
  )
```

## Recap: Plot sizing {.smaller}

``` {.r code-line-numbers="|2-4"}
#| label: statsci-plot-5
#| out-width: 100% 
#| fig-width: 8
#| fig-asp: 0.5
# plot code goes here
```

```{r}
#| ref.label: statsci-plot-4
#| out-width: 100% 
#| fig-width: 8
#| fig-asp: 0.5
#| echo: false
```

## Recap: Data tidying {.smaller}

::: incremental
-   Data sets can't be labeled as wide or long but they can be made wider or longer for a certain analysis that requires a certain format

-   When pivoting longer, variable names that turn into values are characters by default.
    If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.

-   You can tweak a plot forever, but at some point the tweaks are likely not very productive.
    However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::

# Recoding data

## What's going on in this plot? {.smaller}

::: question
Can you guess the variable plotted here?
:::

```{r}
#| echo: false
#| message: false
library(usmap)
library(scales)
library(scico)

states <- us_map(regions = "states")

sales_taxes <- read_csv("data/sales-taxes.csv")
  
states_sales_taxes <- states |>
  left_join(sales_taxes, join_by(full == state))

ggplot(states_sales_taxes) + 
  geom_sf(aes(fill = state_tax_rate)) +
  scale_fill_scico(
    palette = "oslo",
    labels = label_percent(accuracy = 0.01)
  ) +
  theme_void() +
  coord_sf() +
  labs(fill = NULL)
```

## Sales taxes in US states

```{r}
sales_taxes
```

## Sales tax in swing states {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of swing states (Arizona, Georgia, Michigan, Nevada, North Carolina, Pennsylvania, and Wisconsin) vs. non-swing states.

How would you approach this task?
:::

. . .

-   Create a new variable called `swing_state` with levels `"Swing"` and `"Non-swing"`
-   Group by `swing_state`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `if_else()` {.smaller .scrollable}

::: task
Create a new variable called `swing_state` with levels `"Swing"` and `"Non-swing"`.
:::

```{webr}
list_of_swing_states <- c(___)

sales_taxes <- sales_taxes |>
  ___
```

## Recap: `if_else()`

``` r
if_else(
  x == y,               #<1>
  "x is equal to y",    #<2>
  "x is not equal to y" #<3>
)
```

1.  Condition
2.  Value if condition is `TRUE`
3.  Value if condition is `FALSE`

## Sales tax in swing states {.smaller .scrollable}

::: task
Compare the average state sales tax rates of swing states vs. non-swing states.
:::

```{webr}
sales_taxes |>
  ___ |>
  ___
```

## Sales tax in coastal states {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.

How would you approach this task?
:::

. . .

-   Create a new variable called `coast` with levels `"Pacific"`, `"Atlantic"`, and `"Neither"`
-   Group by `coast`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `case_when()` {.smaller .scrollable}

::: task
Create a new variable called `coast` with levels `"Pacific"`, `"Atlantic"`, and `"Neither"`.
:::

```{webr}
pacific_coast <- c("Alaska", "Washington", "Oregon", "California", "Hawaii")

atlantic_coast <- c(
  "Connecticut", "Delaware", "Georgia", "Florida", "Maine", "Maryland", 
  "Massachusetts", "New Hampshire", "New Jersey", "New York", 
  "North Carolina", "Rhode Island", "South Carolina", "Virginia"
)

sales_taxes <- sales_taxes |>
  ___
```

## Recap: `case_when()`

``` r
case_when(
  x > y  ~ "x is greater than y", #<1>
  x < y  ~ "x is less than y",    #<2>
  .default = "x is equal to y"    #<3>  
)
```

1.  Value if first condition is `TRUE`
2.  Value if second condition is `TRUE`
3.  Value if neither condition is `TRUE`, i.e., default value

## Sales tax in coastal states {.smaller .scrollable}

::: task
Compare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.
:::

```{webr}
sales_taxes |>
  group_by(coast) |>
  summarize(mean_state_tax = mean(state_tax_rate))
```

## Sales tax in US regions {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).

How would you approach this task?
:::

. . .

-   Create a new variable called `region` with levels `"Midwest"`, `"Northeast"`, `"South"`, and `"West"`.
-   Group by `region`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `case_when()` {.smaller .scrollable}

::: question
Who feels like filling in the blanks lists of states in each region?
Who feels like it's simply too tedious to write out names of all states?
:::

```{webr}
list_of_midwest_states <- c(___)
list_of_northeast_states <- c(___)
list_of_south_states <- c(___)
list_of_west_states <- c(___)

sales_taxes <- sales_taxes |>
  mutate(
    coast = case_when(
      state %in% list_of_west_states ~ "Midwest",
      state %in% list_of_northeast_states ~ "Northeast",
      state %in% list_of_south_states ~ "South",
      state %in% list_of_west_states ~ "West"
    )
  )
```

# Joining data

## Why join? {.smaller}

Suppose we want to answer questions like:

> Is there a relationship between\
> - number of QS courses taken\
> - having scored a 4 or 5 on the AP stats exam\
> - motivation for taking course\
> - ...\
> and performance in this course?"

. . .

Each of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.

## Why join? {.smaller}

Suppose we want to answer questions like:

> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).

. . .

This can also be solved with *join*ing region information with the state-level sales tax data.

## Setup

For the next few slides...

::: columns
::: {.column width="50%"}
```{r}
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
  )

x
```
:::

::: {.column width="50%"}
```{r}
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
  )

y
```
:::
:::

## `left_join()`

::: columns
::: {.column width="50%"}
![](images/07/left-join.gif)
:::

::: {.column width="50%"}
```{r}
left_join(x, y)
```
:::
:::

## `right_join()`

::: columns
::: {.column width="50%"}
![](images/07/right-join.gif)
:::

::: {.column width="50%"}
```{r}
right_join(x, y)
```
:::
:::

## `full_join()`

::: columns
::: {.column width="50%"}
![](images/07/full-join.gif)
:::

::: {.column width="50%"}
```{r}
full_join(x, y)
```
:::
:::

## `inner_join()`

::: columns
::: {.column width="50%"}
![](images/07/inner-join.gif)
:::

::: {.column width="50%"}
```{r}
inner_join(x, y)
```
:::
:::

## `semi_join()`

::: columns
::: {.column width="50%"}
![](images/07/semi-join.gif)
:::

::: {.column width="50%"}
```{r}
semi_join(x, y)
```
:::
:::

## `anti_join()`

::: columns
::: {.column width="50%"}
![](images/07/anti-join.gif)
:::

::: {.column width="50%"}
```{r}
anti_join(x, y)
```
:::
:::

# Application exercise

## Goal

Compare the average state sales tax rates of states in various regions (Midwest, Northeast, South, West), where the input data are:

1.  States and sales taxes
2.  States and regions

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::
